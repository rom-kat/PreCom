
&НаСервереБезКонтекста
Процедура СверкаДанныхНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID,
		|	dbo_Тип_номенклатурной_единицы.Наименование КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|ГДЕ
		|	НЕ dbo_Тип_номенклатурной_единицы.IsGroup";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СсылкаНомен = Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Наименование);
		
		Если СсылкаНомен<>Неопределено И СсылкаНомен<>Справочники.Номенклатура.ПустаяСсылка() Тогда
			Если Не СсылкаНомен.ЭтоГруппа Тогда
			
			    Сообщить(""+СсылкаНомен+" "+Строка(ВыборкаДетальныеЗаписи.ID));
				
				РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
				РегистрОбъектLS.Отбор.Объект.Установить(СсылкаНомен);
				РегистрОбъектLS.Очистить();
				
				НоваяЗапись = РегистрОбъектLS.Добавить();
				НоваяЗапись.Объект = СсылкаНомен;
				НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
				РегистрОбъектLS.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаДанныхНоменклатуры(Команда)
	СверкаДанныхНоменклатурыНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПривестиНомерКЧислу(ТекНомер)
	НовыйНомер = "";
	Для НомСимвола = 1 По СтрДлина(ТекНомер) Цикл
		ТекСимвол = Сред(ТекНомер, НомСимвола, 1);
		Если ТекСимвол >= "0" И ТекСимвол <= "9" Тогда
			НовыйНомер = НовыйНомер + ТекСимвол;
		ИначеЕсли СтрДлина(НовыйНомер) > 0 Тогда // Основная часть номера уже прошла
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(НовыйНомер) Тогда
		НовыйНомер = "0";
	КонецЕсли;
	
	Возврат Число(НовыйНомер);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерНовогоСчета(ПодразделениеОрганизации, ТекущийОбъектДата)
	
	НовыйДокумент = Истина;
	ИзмениласьДата = Ложь;
	ТекущийНомер = "";
	
	Если НовыйДокумент Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПодразделенияОрганизаций.Префикс КАК Значение
		               |ИЗ
		               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		               |ГДЕ
		               |	ПодразделенияОрганизаций.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ПодразделениеОрганизации);
		
		Префикс = "";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Префикс = СокрЛП(Выборка.Значение);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	СчетНаОплатуПокупателю.Номер,
						|	СчетНаОплатуПокупателю.Дата
						|ИЗ
						|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
						|ГДЕ
						|	СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода";
		
		Запрос.УстановитьПараметр("НачПериода", НачалоГода(ТекущийОбъектДата));
		Запрос.УстановитьПараметр("КонПериода", КонецГода(ТекущийОбъектДата));
		
		МаксНомер = 0;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекНомер = ПривестиНомерКЧислу(Выборка.Номер);
			Если ТекНомер > МаксНомер Тогда
				МаксНомер = ТекНомер;
			КонецЕсли;
		КонецЦикла;
		
		МаксНомер = МаксНомер + 1;
		
		ТекущийНомер = СокрЛП(Префикс)+Формат(МаксНомер, "ЧДЦ=; ЧГ=0");
	КонецЕсли;

	Возврат ТекущийНомер;

КонецФункции // ПолучитьНомерНовогоСчета()

&НаСервереБезКонтекста
Функция ПолучитьПодразделение()

	Возврат Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");

КонецФункции // ПолучитьПодразделение()

&НаСервереБезКонтекста
Функция ПолучитьКонтрагента(ИНН)

	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
	
КонецФункции // ПолучитьКонтрагента()

&НаСервереБезКонтекста
Функция ПолучитьОбъект(ID, ВидОбъекта)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыLogiSmart.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|ГДЕ
		|	ОбъектыLogiSmart.ID_LS = &ID_LS
		|	И ОбъектыLogiSmart.Объект ССЫЛКА "+ВидОбъекта;
	
	Запрос.УстановитьПараметр("ID_LS", ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Объект;
	Иначе 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьПользователя()

&НаСервереБезКонтекста
Функция ПолучитьСтавку(СтавкаНДСЧислом)

	Если СтавкаНДСЧислом=18 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС18;	
		
	ИначеЕсли СтавкаНДСЧислом=20 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС20;		
		
	ИначеЕсли СтавкаНДСЧислом=0 Тогда
	
		Возврат Перечисления.СтавкиНДС.БезНДС;
		
	КонецЕсли;	

КонецФункции // ПолучитьСтавку()

&НаСервереБезКонтекста
Функция ПолучитьСтрокиСчета(IDСчета)

	ТЗВозврат = Новый ТаблицаЗначений;
	ТЗВозврат.Колонки.Добавить("Номенклатура");
	ТЗВозврат.Колонки.Добавить("ID_НоменклатурнаяЕдиница");
	ТЗВозврат.Колонки.Добавить("СтавкаНДС");
	ТЗВозврат.Колонки.Добавить("Цена");
	ТЗВозврат.Колонки.Добавить("Количество");
	ТЗВозврат.Колонки.Добавить("СуммаНДС");
	ТЗВозврат.Колонки.Добавить("Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Контейнер_Услуги_Счета.Ссылка КАК Ссылка,
		|	dbo_Контейнер_Услуги_Счета.ID КАК ID,
		|	dbo_Контейнер_Услуги_Счета.ID_Счет КАК ID_Счет,
		|	dbo_Контейнер_Услуги_Счета.ID_НоменклатурнаяЕдиница.ID КАК ID_НоменклатурнаяЕдиница,
		|	ЕСТЬNULL(dbo_Контейнер_Услуги_Счета.Налог, 0) КАК Налог,
		|	dbo_Контейнер_Услуги_Счета.Курс КАК Курс,
		|	dbo_Контейнер_Услуги_Счета.Количество КАК Количество,
		|	dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета / dbo_Контейнер_Услуги_Счета.Количество КАК Цена,
		|	dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета КАК Сумма,
		|	dbo_Контейнер_Услуги_Счета.СуммаНалогаВалСчета КАК СуммаНДС
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контейнер_Услуги_Счета КАК dbo_Контейнер_Услуги_Счета
		|ГДЕ
		|	dbo_Контейнер_Услуги_Счета.ID_Счет = &ID_Счет";
	
	
	СсылкаЗаписьВнешнийИсточник = ВнешниеИсточникиДанных.LogiSmart.Таблицы.dbo_Счет.ПолучитьСсылку(IDСчета);
	Запрос.УстановитьПараметр("ID_Счет", СсылкаЗаписьВнешнийИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЗВозврат = ТЗВозврат.Добавить();
		СтрокаТЗВозврат.Номенклатура = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_НоменклатурнаяЕдиница, "Справочник.Номенклатура");
		СтрокаТЗВозврат.СтавкаНДС = ПолучитьСтавку(ВыборкаДетальныеЗаписи.Налог);
		ЗаполнитьЗначенияСвойств(СтрокаТЗВозврат, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат ТЗВозврат;
	
КонецФункции // ПолучитьСтрокиСчета()

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию()

	Возврат Справочники.Организации.НайтиПоКоду("БП-000001");

КонецФункции // ПолучитьОрганизацию()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Процедура УстановитьБанковскихСчет()

	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалюта(KOD_Валюта)

	Возврат Справочники.Валюты.НайтиПоКоду(KOD_Валюта);

КонецФункции // ПолучитьВалюта(СтруктураСчета.KOD_Валюта)()

&НаСервереБезКонтекста
Функция СоздатьСчет(СтруктураСчета, СчётНаОплатуСсылка)

	ТекДата = ТекущаяДата();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
		Блокировка.Заблокировать();
		
		ПодразделениеОрганизации = ПолучитьПодразделение();
		ДатаСчета = СтруктураСчета.Дата_Выставления;
		
		Если СчётНаОплатуСсылка=Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
			СчётНаОплатуОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		Иначе 	
			СчётНаОплатуОбъект = СчётНаОплатуСсылка.ПолучитьОбъект();
			СчётНаОплатуОбъект.Товары.Очистить();
		КонецЕсли;
		
		СчётНаОплатуОбъект.Номер = ПолучитьНомерНовогоСчета(ПодразделениеОрганизации, ДатаСчета);
		СчётНаОплатуОбъект.Дата = ДатаСчета;
		СчётНаОплатуОбъект.ВалютаДокумента = ПолучитьВалюта(СтруктураСчета.KOD_Валюта);
		СчётНаОплатуОбъект.Организация = ПолучитьОрганизацию();
		СчётНаОплатуОбъект.ОрганизацияПолучатель = ПолучитьОрганизацию();
		СчётНаОплатуОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СчётНаОплатуОбъект.Контрагент = ПолучитьКонтрагента(СтруктураСчета.ИННКонтрагента);
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.Организация, 
			ПолучитьМассивВидовДоговоров());
		СчётНаОплатуОбъект.Комментарий = СтруктураСчета.Комментарий;
		СчётНаОплатуОбъект.Ответственный = ПолучитьОбъект(СтруктураСчета.IDОтветственный, "Справочник.Пользователи");
		СчётНаОплатуОбъект.СуммаВключаетНДС = Истина;
		
		СчётНаОплатуОбъект.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерСчета+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетныеСчетаДляКонтрагентаСрезПоследних.РасчетныйСчет
			|ИЗ
			|	РегистрСведений.РасчетныеСчетаДляКонтрагента.СрезПоследних(
			|			,
			|			Организация = &Организация
			|				И Контрагент = &Контрагент) КАК РасчетныеСчетаДляКонтрагентаСрезПоследних";
		
		Запрос.УстановитьПараметр("Контрагент", СчётНаОплатуОбъект.Контрагент);
		Запрос.УстановитьПараметр("Организация", СчётНаОплатуОбъект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчётНаОплатуОбъект.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.РасчетныйСчет
		Иначе 
			мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			СчётНаОплатуОбъект.СтруктурнаяЕдиница = Справочники.БанковскиеСчета.ПустаяСсылка();
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчётНаОплатуОбъект.СтруктурнаяЕдиница, СчётНаОплатуОбъект.Организация, мВалютаРегламентированногоУчета);
		КонецЕсли;
		
		ТЗСтрокиСчёта = ПолучитьСтрокиСчета(СтруктураСчета.ID);
		
		Для каждого СтрокаТЗСтрокиСчёта Из ТЗСтрокиСчёта Цикл
			
			СтрокаТовары = СчётНаОплатуОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТЗСтрокиСчёта);
		
		КонецЦикла;
		
		СчётНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		СчётНаОплатуСсылка = СчётНаОплатуОбъект.Ссылка;
		
		СрокОплаты = ПолучитьСрокОплаты(СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Дата);
		СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчётНаОплатуСсылка, СрокОплаты);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат СчётНаОплатуСсылка;
	
КонецФункции // СоздатьСчет()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплаты(Договор, ДатаДокумента)
	
	Если Договор.УстановленСрокОплаты Тогда
		КоличествоДней = Договор.СрокОплаты;
	Иначе 	
		КоличествоДней = 37;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, &КоличествоДней) КАК СрокОплаты";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СрокОплаты;
	
КонецФункции // ПолучитьСрокОплаты()

&НаСервереБезКонтекста
Функция ПолучитьСтрокуСоединения()

	ПараметрыСоединения = ВнешниеИсточникиДанных.LogiSmart.ПолучитьОбщиеПараметрыСоединения();	
	СтрокаСоединения = ПараметрыСоединения.СтрокаСоединения;	

	Возврат СтрокаСоединения;
	
КонецФункции // ПолучитьСтрокуСоединения()

&НаСервереБезКонтекста
Процедура ЗаписатьПризнак1с(Команда, ID_Счет)

	Команда.CommandText = "UPDATE T1 SET 
							|Признак1С = 1
							|FROM ""dbo"".""Счет"" AS T1 
							|WHERE T1.ID = "+Строка(Формат(ID_Счет, "ЧГ=0"));
		
	Команда.Execute();
	
КонецПроцедуры // ЗаписатьПризнак1с()


&НаСервереБезКонтекста
Процедура ЗагрузкаСчетовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаНаОплатуLogiSmart.ID_LS КАК ID_LS,
		|	СчетаНаОплатуLogiSmart.Объект КАК СчётНаОплатуСсылка,
		|	СчетаНаОплатуLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК СчетаНаОплатуLogiSmart
		|ГДЕ
		|	СчетаНаОплатуLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПокупателю";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МинДатаВремяИзменения = КонецДня(ТекущаяДата());
	МассивIDLS = Новый Массив;
	ТЗIDLS = Новый ТаблицаЗначений;
	ТЗIDLS.Колонки.Добавить("ID_LS");
	ТЗIDLS.Колонки.Добавить("СчётНаОплатуСсылка");
	ТЗIDLS.Колонки.Добавить("ДатаВремяИзменения");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МинДатаВремяИзменения>ВыборкаДетальныеЗаписи.ДатаВремяИзменения Тогда
			МинДатаВремяИзменения = ВыборкаДетальныеЗаписи.ДатаВремяИзменения;
		КонецЕсли;
		
		МассивIDLS.Добавить(ВыборкаДетальныеЗаписи.ID_LS);
		
		СтрокаТЗIDLS = ТЗIDLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗIDLS, ВыборкаДетальныеЗаписи);
		//СтрокаТЗIDLS.ID_LS = ВыборкаДетальныеЗаписи.ID_LS;
		//СтрокаТЗIDLS.ID_LS = ВыборкаДетальныеЗаписи.ID_LS;
		//СтрокаТЗIDLS.ДатаВремяИзменения = ВыборкаДетальныеЗаписи.ДатаВремяИзменения;
	КонецЦикла;
	
		
	Соединение  = Новый COMОбъект("ADODB.Connection");
	Команда     = Новый COMОбъект("ADODB.Command");
	
	Соединение.ConnectionString = ПолучитьСтрокуСоединения();
	Соединение.ConnectionTimeout = 30;
	Соединение.CommandTimeout = 600;
	
	
	//Открытие соединение
	Попытка
		Соединение.Open();
		Команда.ActiveConnection  = Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.ID_Контрагент КАК ID_Контрагент,
		|	dbo_Счет.ID_Валюта КАК ID_Валюта,
		|	dbo_Счет.ID_Валюта.KOD КАК KOD_Валюта,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаВВалСчета,
		|	dbo_Счет.СуммаВБазовойВалюте КАК СуммаВБазовойВалюте,
		|	dbo_Счет.СуммаКОплате КАК СуммаКОплате,
		|	dbo_Счет.Комментарий КАК Комментарий,
		|	dbo_Контрагент.ИНН КАК ИННКонтрагента,
		|	dbo_Персона.ID КАК IDОтветственный,
		|	dbo_Счет.CurEditTime КАК CurEditTime,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Признак_Выгрузки_1С КАК dbo_Признак_Выгрузки_1С
		|		ПО dbo_Счет.Признак1С = dbo_Признак_Выгрузки_1С.Ссылка
		|			И (dbo_Признак_Выгрузки_1С.ID <> 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Счет.ID_Контрагент.ID = dbo_Контрагент.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|		ПО dbo_Счет.ID_Менеджер.ID = dbo_Персона.ID
		|ГДЕ
		|	(НЕ dbo_Счет.ID В (&МассивIDLS)
		|			ИЛИ dbo_Счет.ID В (&МассивIDLS)
		|				И dbo_Счет.CurEditTime > &МинДатаИзменения)";
	
	Запрос.УстановитьПараметр("МассивIDLS", МассивIDLS);
	Запрос.УстановитьПараметр("МинДатаИзменения", МинДатаВремяИзменения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТЗ = ТЗIDLS.Найти(ВыборкаДетальныеЗаписи.ID, "ID_LS");
		Если СтрокаТЗ<>Неопределено Тогда
			СчётНаОплатуСсылка = СтрокаТЗ.СчётНаОплатуСсылка;
		    Если СтрокаТЗ.ДатаВремяИзменения>=ВыборкаДетальныеЗаписи.CurEditTime Тогда
				Продолжить;
			КонецЕсли;
		Иначе 
			СчётНаОплатуСсылка = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураСчета = Новый Структура("ID, ID_Контрагент, KOD_Валюта, НомерСчета, Дата_Выставления, СуммаВВалСчета, СуммаВБазовойВалюте, СуммаКОплате, Комментарий, ИННКонтрагента, IDОтветственный, РеференсыЗаказов");
		
		ЗаполнитьЗначенияСвойств(СтруктураСчета, ВыборкаДетальныеЗаписи);
		
		//СчетСсылка = СоздатьСчет(СтруктураСчета, СчётНаОплатуСсылка);
		//
		//РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
		//РегистрОбъектLS.Отбор.Объект.Установить(СчетСсылка);
		//РегистрОбъектLS.Очистить();
		//		
		//НоваяЗапись = РегистрОбъектLS.Добавить();
		//НоваяЗапись.Объект = СчетСсылка;
		//НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
		//НоваяЗапись.ДатаВремяИзменения = ВыборкаДетальныеЗаписи.CurEditTime;
		//РегистрОбъектLS.Записать();
		
		ЗаписатьПризнак1с(Команда, ВыборкаДетальныеЗаписи.ID);
		
	КонецЦикла;
	
	Соединение.Close();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСчетов(Команда)
	ЗагрузкаСчетовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНоменклатурыLSНаСервере()
	
	ТаблицаНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID,
		|	dbo_Тип_номенклатурной_единицы.Наименование КАК Наименование,
		|	dbo_Тип_номенклатурной_единицы.Устаревший КАК Устаревший
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|ГДЕ
		|	НЕ dbo_Тип_номенклатурной_единицы.IsGroup
		|	И dbo_Тип_номенклатурной_единицы.Устаревший <> ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаНоменклатуры = ТаблицаНоменклатуры.Добавить();
		
		СтрокаТаблицаНоменклатуры.Номенклатура = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Номенклатура");
		СтрокаТаблицаНоменклатуры.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаНоменклатуры.НаименованиеLS = ВыборкаДетальныеЗаписи.Наименование;
		СтрокаТаблицаНоменклатуры.Устаревшие = ВыборкаДетальныеЗаписи.Устаревший;

		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеНоменклатурыLS(Команда)
	ЗаполнитьДанныеНоменклатурыLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановкаСоответствияОбъектаLogiSmart(СсылкаОбъект, ID_LS)
	
	РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
	РегистрОбъектLS.Отбор.Объект.Установить(СсылкаОбъект);
	РегистрОбъектLS.Очистить();
				
	НоваяЗапись = РегистрОбъектLS.Добавить();
	НоваяЗапись.Объект = СсылкаОбъект;
	НоваяЗапись.ID_LS = ID_LS;
	РегистрОбъектLS.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаНоменклатуры.ТекущиеДанные.ID;
	УстановкаСоответствияОбъектаLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСчетовLSНаСервере()
	
	ТаблицаСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.ID_Контрагент КАК ID_Контрагент,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаСчетов = ТаблицаСчетов.Добавить();
		
		СтрокаТаблицаСчетов.СчётНаОплату = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Документ.СчетНаОплатуПокупателю");
		СтрокаТаблицаСчетов.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаСчетов.СчётLS = ВыборкаДетальныеЗаписи.НомерСчета;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСчетовLS(Команда)
	ЗаполнитьДанныеСчетовLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	УстановкаСоответствияОбъектаLogiSmart(ВыбранноеЗначение, ID_LS);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПользователейLSНаСервере()
	
	ТаблицаПользователей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Персона.ID КАК ID,
		|	dbo_Персона.Фамилия КАК Фамилия,
		|	dbo_Персона.Имя КАК Имя,
		|	dbo_Персона.Отчество КАК Отчество,
		|	dbo_Персона.Представление КАК Представление
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаПользователей = ТаблицаПользователей.Добавить();
		
		СтрокаТаблицаПользователей.Пользователь = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Пользователи");
		СтрокаТаблицаПользователей.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаПользователей.НаименованиеLS = ВыборкаДетальныеЗаписи.Фамилия+" "+ВыборкаДетальныеЗаписи.Имя+" "+ВыборкаДетальныеЗаписи.Отчество;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПользователейLS(Команда)
	ЗаполнитьДанныеПользователейLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаПользователейПользовательОбработкаВыбораНаСервере(ПользовательСсылка, ID_LS)
	
	РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
	РегистрОбъектLS.Отбор.Объект.Установить(ПользовательСсылка);
	РегистрОбъектLS.Очистить();
				
	НоваяЗапись = РегистрОбъектLS.Добавить();
	НоваяЗапись.Объект = ПользовательСсылка;
	НоваяЗапись.ID_LS = ID_LS;
	РегистрОбъектLS.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаПользователей.ТекущиеДанные.ID;
	ТаблицаПользователейПользовательОбработкаВыбораНаСервере(ВыбранноеЗначение, ID_LS);
КонецПроцедуры
