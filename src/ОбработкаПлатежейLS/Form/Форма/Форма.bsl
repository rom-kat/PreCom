&НаСервере
Функция ПолучитьМассивПлатежей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеНаРасчетныйСчет.Организация КАК Организация,
	|	ПоступлениеНаРасчетныйСчет.Контрагент КАК Контрагент,
	|	ОбъектыLogiSmart.ID_LS КАК ID_LS
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = ПоступлениеНаРасчетныйСчет.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
	|		ПО ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату = ОбъектыLogiSmart.Объект
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПоступлениеДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивСчетовLS = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСчетовLS.Добавить(ВыборкаДетальныеЗаписи.ID_LS);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_Разноска_Платежей.Ссылка КАК Ссылка,
	|	dbo_Разноска_Платежей.ID КАК ID,
	|	dbo_Разноска_Платежей.ID_Счет КАК ID_Счет,
	|	dbo_Разноска_Платежей.ID_Платеж КАК ID_Платеж,
	|	dbo_Разноска_Платежей.CurTime КАК CurTime,
	|	dbo_Разноска_Платежей.CurUser КАК CurUser,
	|	dbo_Разноска_Платежей.Сумма КАК Сумма,
	|	dbo_Разноска_Платежей.ДатаКурса КАК ДатаКурса,
	|	dbo_Разноска_Платежей.КурсРазноски КАК КурсРазноски,
	|	dbo_Разноска_Платежей.ID_Способ_Разноски КАК ID_Способ_Разноски,
	|	dbo_Разноска_Платежей.СуммаПлатеж КАК СуммаПлатеж,
	|	dbo_Разноска_Платежей.ID_Монолит КАК ID_Монолит,
	|	dbo_Разноска_Платежей.CurEditTime КАК CurEditTime,
	|	dbo_Разноска_Платежей.CurEditUser КАК CurEditUser,
	|	dbo_Разноска_Платежей.Раздел_Дебет КАК Раздел_Дебет,
	|	dbo_Разноска_Платежей.Знак_Дебет КАК Знак_Дебет,
	|	dbo_Разноска_Платежей.Раздел_Кредит КАК Раздел_Кредит,
	|	dbo_Разноска_Платежей.Знак_Кредит КАК Знак_Кредит,
	|	dbo_Платеж.ID_Контрагент КАК ID_Контрагент,
	|	dbo_Платеж.ID_Направление КАК ID_Направление,
	|	dbo_Платеж.ID_Валюта КАК ID_Валюта,
	|	dbo_Платеж.ID_Собственная_фирма КАК ID_Собственная_фирма,
	|	dbo_Платеж.Ссылка КАК Платеж
	|ИЗ
	|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Разноска_Платежей КАК dbo_Разноска_Платежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Платеж КАК dbo_Платеж
	|		ПО dbo_Разноска_Платежей.ID_Платеж = dbo_Платеж.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
	|		ПО dbo_Разноска_Платежей.ID_Счет = dbo_Счет.Ссылка
	|ГДЕ
	|	dbo_Счет.ID В(&МассивСчетовLS)";
	
	Запрос.УстановитьПараметр("МассивСчетовLS", МассивСчетовLS);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивПлатежейLS = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПлатежейLS.Добавить(ВыборкаДетальныеЗаписи.Платеж);
	КонецЦикла;
	
	Возврат МассивПлатежейLS;

КонецФункции // ПолучитьМассивПлатежей()



&НаСервере
Процедура НайтиПлатежиLSНаСервере()
	
	МассивПлатежейLS = ПолучитьМассивПлатежей();
	
	//Если МассивПлатежейLS.Количество()>0 Тогда
		//ЭлементОтбора = ПлатежиLS.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора = ПлатежиLS.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = МассивПлатежейLS;
	//Иначе
	//	ПлатежиLS.Отбор.Элементы.Очистить();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьIDОбъектLS(ОбъектСсылка)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыLogiSmart.ID_LS КАК ID_LS
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|ГДЕ
		|	ОбъектыLogiSmart.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат	ВыборкаДетальныеЗаписи.ID_LS;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьIDОбъектLS()


&НаКлиенте
Процедура НайтиПлатежиLS(Команда)
	НайтиПлатежиLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуСоединения()
	
	ПараметрыСоединения = ВнешниеИсточникиДанных.LogiSmart.ПолучитьОбщиеПараметрыСоединения();	
	СтрокаСоединения = ПараметрыСоединения.СтрокаСоединения;	
	
	Возврат СтрокаСоединения;
	
КонецФункции // ПолучитьСтрокуСоединения()

&НаСервере
Процедура ЗаписатьПлатежиLSНаСервере()
	
	Если Не БезопасныйРежим() Тогда
		
		МассивПлатежейLS = ПолучитьМассивПлатежей();
		
		Соединение  = Новый COMОбъект("ADODB.Connection");
		Команда     = Новый COMОбъект("ADODB.Command");
		
		Соединение.ConnectionString = ПолучитьСтрокуСоединения();
		Соединение.ConnectionTimeout = 30;
		Соединение.CommandTimeout = 600;
		
		//Открытие соединение
		Попытка
			Соединение.Open();
			Команда.ActiveConnection  = Соединение;
			Команда.CommandType = 1;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;  
		
		ID_Направление = "0";
		ID_Контрагент = Формат(ПолучитьIDОбъектLS(ПоступлениеДС.Контрагент), "ЧГ=0");
		ID_Собственная_фирма = "1805";
		ID_Валюта =  ПоступлениеДС.ВалютаДокумента.Код;
		ДатаДок = Формат(ПоступлениеДС.Дата, "ДФ=yyyyMMdd")+" "+Час(ПоступлениеДС.Дата)+":"+?(Минута(ПоступлениеДС.Дата)<10,  "0"+Минута(ПоступлениеДС.Дата), Минута(ПоступлениеДС.Дата));
		СуммаДок = Формат(ПоступлениеДС.СуммаДокумента, "ЧРД=.; ЧГ=0");
		
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПоступлениеДС.ВалютаДокумента, ПоступлениеДС.Дата);
		КурсВалюты = КурсНаДату.Курс;
		
		НомерПП = ПоступлениеДС.НомерВходящегоДокумента;
		ID_БазовойВалюты = ПоступлениеДС.ВалютаДокумента.Код;
		СуммаВБазВалюте = Формат(ПоступлениеДС.СуммаДокумента, "ЧРД=.; ЧГ=0");
		ID_Договор = Формат(ПолучитьIDОбъектLS(ПоступлениеДС.ДоговорКонтрагента), "ЧГ=0");
		Назначение_Платежа = ПоступлениеДС.НазначениеПлатежа;
		
		Если МассивПлатежейLS.Количество()>0 Тогда
		
		Иначе 	
			Команда.CommandText = "
			
			|SET NOCOUNT ON
			|declare @p3 int
			|set @p3=0
			|
			|declare @p7 int
			|set @p7=4241
			|
			|declare @p8 nvarchar(255)
			|set @p8=N'Данные успешно добавлены!'
			|
			|exec sp_executesql N'
			|BEGIN TRAN
			|INSERT INTO Платеж (ID_Контрагент, ID_Собственная_фирма, ID_Валюта, ID_ВидОплаты, ID_Статус, ID_Выгодоприобр, ID_КатегорияПлатежа, 
			|						ID_ЦентрДС, ID_Плательщик, Дата, Сумма, ККурс, НомерПП, UserRefНомерПП, ID_БазовойВалюты, СуммаВБазВалюте, ID_ВидУчета, СуммаФакт, 
			|						IDВалФакт, КроссКурс, ID_Получатель, ОбщНадбавка, ДатаПодтверждения, NotInBalance, РассчетКакНДС, ID_Тип_Плат_Док, ID_Договор, 
			|						ID_РС_Плательщик, ID_РС_Получатель, Назначение_Платежа, Комментарий, СтавкаНДС, СуммаНДС, ВлияетНаПрибыль, ПоказательКБК, ПоказательПериода, 
			|						ID_СчетДебет, ID_СчетКредит, Раздел_Дебет, Знак_Дебет, Раздел_Кредит, Знак_Кредит, НеУчитыватьВББ, НомерТР, ВремяДействияТР, КурсоваяРазница, 
			|						ID_РазнарядкаКонверсииОП, ОтложенныйПлатеж, IsTemplate, ID_Направление, IsNew, UserRef) 
			|VALUES ("+ID_Контрагент+", "+ID_Собственная_фирма+", "+ID_Валюта+", 2, 6, "+ID_Контрагент+", 16, 
			|		Null, "+ID_Контрагент+", N''"+ДатаДок+"'', "+СуммаДок+", "+КурсВалюты+", "+НомерПП+", 0, "+ID_БазовойВалюты+", "+СуммаВБазВалюте+", 1, "+СуммаДок+", 
			|		"+ID_Валюта+", 1, "+ID_Собственная_фирма+", 0, Null, 0, 0, 1, "+ID_Договор+", 
			|		Null, 1936, N''"+Назначение_Платежа+"'', Null, 0, 0, 0, Null, Null, 
			|		Null, Null, Null, Null, Null, Null, 0, Null, Null, Null, 
			|		Null, 0, N''False'', "+ID_Направление+", 0, N''False'')
			|
			|SELECT @NewID = SCOPE_IDENTITY()
			|
			|IF @@ERROR <> 0 
			|	BEGIN
			|	SET @msg=N''Невозможно добавить данные!''
			|	SET @NewID=NULL
			|ROLLBACK TRAN
			|	set @RetValue = 1 
			|	END
			|
			|ELSE BEGIN
			|	SET @msg=N''Данные успешно добавлены!''
			|COMMIT TRAN
			|	set @RetValue = 0 
			|END
			|	
			|	',N'
			|	@RetValue int output, 
			|	@NewID int output, 
			|	@msg nvarchar(255) output', 
			|	@RetValue=@p3 output, 
			|	@NewID=@p7 output,
			|	@msg=@p8 output
			|	select @p3, @p7, @p8";
			
			Выборка = Команда.Execute();
			
			Пока Не Выборка.EOF() Цикл
				
				ID_Платеж = Выборка.Fields(1).Value;
				ID_Платеж = Формат(ID_Платеж, "ЧРД=.; ЧГ=0");
				Сообщить(""+Выборка.Fields(0).Value+" "+Выборка.Fields(1).Value+" "+Выборка.Fields(2).Value);
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Сделка КАК Сделка,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаУслуг КАК СуммаУслуг,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсНаДатуПриобретенияРеализацииВалюты,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ПорядокОтраженияАванса КАК ПорядокОтраженияАванса,
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.ДоходыУСН КАК ДоходыУСН
					|ИЗ
					|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
					|ГДЕ
					|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ПоступлениеДС);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ID_Счет = ПолучитьIDОбъектLS(ВыборкаДетальныеЗаписи.СчетНаОплату);
					ID_Счет = Формат(ID_Счет, "ЧРД=.; ЧГ=0");
					СписаноБазВал = Формат(ВыборкаДетальныеЗаписи.СуммаВзаиморасчетов, "ЧРД=.; ЧГ=0");
					КурсРазноски = Формат(ВыборкаДетальныеЗаписи.КурсВзаиморасчетов, "ЧРД=.; ЧГ=0");;
					СуммаПлатеж = Формат(ВыборкаДетальныеЗаписи.СуммаПлатежа, "ЧРД=.; ЧГ=0");
					
					Команда.CommandText = "
					
					|exec sp_executesql N'
					|	INSERT INTO Разноска_Платежей
		            |		(ID_Счет, ID_Платеж, Сумма, ДатаКурса, КурсРазноски, ID_Способ_Разноски, СуммаПлатеж, ID_СчетДебет, ID_СчетКредит, Раздел_Дебет, Знак_Дебет, Раздел_Кредит, Знак_Кредит)
					|	VALUES        
					|		(@ID_Счет,@ID_Платеж,@СписаноБазВал,@ДатаКурса,@КурсРазноски,@ID_Способ_Разноски,@СуммаПлатеж,@ID_СчетДебет,@ID_СчетКредит,@Раздел_Дебет,@Знак_Дебет,@Раздел_Кредит,@Знак_Кредит);  
					|
					|	UPDATE Счет SET СуммаКОплате=ROUND(СуммаКОплате-@СписаноБазВал,2) 
					|	WHERE ID=@ID_Счет
					|',
					|	N'@ID_Счет int,@ID_Платеж int,@СписаноБазВал float,@КурсРазноски float,@СуммаПлатеж float,@ID_Способ_Разноски int,
					|	@ДатаКурса datetime,@ID_СчетДебет int,@ID_СчетКредит int,@Раздел_Дебет nvarchar(5),@Знак_Дебет nvarchar(5),@Раздел_Кредит nvarchar(5),@Знак_Кредит nvarchar(5)',
					|	
					|	@ID_Счет="+ID_Счет+",@ID_Платеж="+ID_Платеж+",@СписаноБазВал="+СписаноБазВал+",@КурсРазноски="+КурсРазноски+",@СуммаПлатеж="+СуммаПлатеж+",@ID_Способ_Разноски=2,
					|	@ДатаКурса='"+ДатаДок+"',@ID_СчетДебет=NULL,@ID_СчетКредит=NULL,@Раздел_Дебет=NULL,@Знак_Дебет=NULL,@Раздел_Кредит=NULL,@Знак_Кредит=NULL
					|";
					
					Команда.Execute();					
				КонецЦикла;
				
				Выборка.MoveNext();
			
			КонецЦикла;
			Выборка.Close();
		КонецЕсли;
		
		Соединение.Close();
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаписатьПлатежиLS(Команда)
	ЗаписатьПлатежиLSНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоступлениеДСОчисткаНаСервере()
	ПлатежиLS.Отбор.Элементы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеДСОчистка(Элемент, СтандартнаяОбработка)
	ПоступлениеДСОчисткаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоступлениеДСПриИзмененииНаСервере()
	НайтиПлатежиLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеДСПриИзменении(Элемент)
	ПоступлениеДСПриИзмененииНаСервере();
КонецПроцедуры
