#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//УстановитьБезопасныйРежим(Ложь);
	//ЗаполнитьДанныеКонтрагентовLSНаСервере();
	ЗаполнитьТипыДокументов();
	//ЗаполнитьДанныеДоговорыLSНаСервере();
	//ЗаполнитьДанныеНоменклатурыLSНаСервере();
	//ЗаполнитьДанныеПользователейLSНаСервере();
	
	ПериодВыбораСчетов.ДатаНачала = НачалоГода(ТекущаяДата());
	ПериодВыбораСчетов.ДатаОкончания = ТекущаяДата();
	ПризнакСчетаПоставщика = 5;
	ПризнакСчета = 5;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
КонецПроцедуры
#КонецОбласти

#Область ОбщегоНазначения

&НаСервереБезКонтекста
Функция РазницаДнейМеждуДатами(ДатаОкончания, ДатаНачала)

	Возврат (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60 * 60 * 24);

КонецФункции // РазницаДнейМеждуДатами(СтрокаТаблицаПаспортовНаПеревозку.ДатаУстановкиЗавершеноОперационно, КонецМесяца(СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершеноОперационно))()

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоровПоставщика()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	Возврат СписокВидовДоговоров;	

КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS, ДатаВремяИзменения = "", Очистка = Ложь, Валюта = "Справочники.Валюты.ПустаяСсылка()")
	
	Если ДатаВремяИзменения="" Тогда
		ДатаВремяИзменения = ТекущаяДата();
	КонецЕсли;
	
	РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
	РегистрОбъектLS.Отбор.Объект.Установить(СсылкаОбъект);
	Если Валюта<>"Справочники.Валюты.ПустаяСсылка()" Тогда
		РегистрОбъектLS.Отбор.Валюта.Установить(Валюта);
	КонецЕсли;
	РегистрОбъектLS.Отбор.ID_LS.Установить(ID_LS);
	РегистрОбъектLS.Очистить();
	
	Если Не Очистка Тогда 
		НоваяЗапись = РегистрОбъектLS.Добавить();
		НоваяЗапись.Объект = СсылкаОбъект;
		Если Валюта<>"Справочники.Валюты.ПустаяСсылка()" Тогда
			НоваяЗапись.Валюта = Валюта;
		КонецЕсли;
		НоваяЗапись.ID_LS = ID_LS;
		НоваяЗапись.ДатаВремяИзменения = ДатаВремяИзменения;
	КонецЕсли;
	
	РегистрОбъектLS.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПривестиНомерКЧислу(ТекНомер)
	
	НовыйНомер = "";
	Для НомСимвола = 1 По СтрДлина(ТекНомер) Цикл
		ТекСимвол = Сред(ТекНомер, НомСимвола, 1);
		Если ТекСимвол >= "0" И ТекСимвол <= "9" Тогда
			НовыйНомер = НовыйНомер + ТекСимвол;
		ИначеЕсли СтрДлина(НовыйНомер) > 0 Тогда // Основная часть номера уже прошла
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(НовыйНомер) Тогда
		НовыйНомер = "0";
	КонецЕсли;
	
	Возврат Число(НовыйНомер);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодразделение()

	Возврат Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");

КонецФункции // ПолучитьПодразделение()

&НаСервереБезКонтекста
Функция ПолучитьКонтрагента(ИНН)

	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
	
КонецФункции // ПолучитьКонтрагента()

&НаСервереБезКонтекста
Функция ПолучитьОбъектПоID(ID, ВидОбъекта, Валюта = "Справочники.Валюты.ПустаяСсылка()") 

	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыLogiSmart.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|ГДЕ
		|	ОбъектыLogiSmart.ID_LS = &ID_LS
		|	"+?(Валюта = "Справочники.Валюты.ПустаяСсылка()", "", "И ОбъектыLogiSmart.Валюта = &Валюта")+"
		|	И ОбъектыLogiSmart.Объект ССЫЛКА "+ВидОбъекта;
	
	Запрос.УстановитьПараметр("ID_LS", ID);
	Если Валюта<>"Справочники.Валюты.ПустаяСсылка()" Тогда
		Запрос.УстановитьПараметр("Валюта", Валюта);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Объект;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьОбъект()

&НаСервереБезКонтекста
Функция ПолучитьОбъект(ID, ВидОбъекта)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыLogiSmart.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|ГДЕ
		|	ОбъектыLogiSmart.ID_LS = &ID_LS
		|	И ОбъектыLogiSmart.Объект ССЫЛКА "+ВидОбъекта;
	
	Запрос.УстановитьПараметр("ID_LS", ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Объект;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьОбъект()

&НаСервереБезКонтекста
Функция ПолучитьСтавку(СтавкаНДСЧислом)

	Если СтавкаНДСЧислом=18 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС18;	
		
	ИначеЕсли СтавкаНДСЧислом=20 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС20;		
		
	ИначеЕсли СтавкаНДСЧислом=0 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СтавкаНДСЧислом="Без НДС" Тогда
	
		Возврат Перечисления.СтавкиНДС.БезНДС;	
		
	КонецЕсли;	

КонецФункции // ПолучитьСтавку()

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию()

	Возврат Справочники.Организации.НайтиПоКоду("БП-000001");

КонецФункции // ПолучитьОрганизацию()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВалюта(KOD_Валюта)

	Возврат Справочники.Валюты.НайтиПоКоду(KOD_Валюта);

КонецФункции // ПолучитьВалюта(СтруктураСчета.KOD_Валюта)()

&НаСервереБезКонтекста
Функция ПолучитьСтрокуСоединения()

	ПараметрыСоединения = ВнешниеИсточникиДанных.LogiSmart.ПолучитьОбщиеПараметрыСоединения();	
	СтрокаСоединения = ПараметрыСоединения.СтрокаСоединения;	

	Возврат СтрокаСоединения;
	
КонецФункции // ПолучитьСтрокуСоединения()

&НаСервереБезКонтекста
Процедура ЗаписатьПризнак1с(ID_Счет)
	
	Если Не БезопасныйРежим() Тогда
		
		Соединение  = Новый COMОбъект("ADODB.Connection");
		Команда     = Новый COMОбъект("ADODB.Command");
		
		Соединение.ConnectionString = ПолучитьСтрокуСоединения();
		Соединение.ConnectionTimeout = 30;
		Соединение.CommandTimeout = 600;
		
		//Открытие соединение
		Попытка
			Соединение.Open();
			Команда.ActiveConnection  = Соединение;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;

		Команда.CommandText = "UPDATE T1 SET 
								|Признак1С = 1
								|FROM ""dbo"".""Счет"" AS T1 
								|WHERE T1.ID = "+Строка(Формат(ID_Счет, "ЧГ=0"));
			
		Команда.Execute();
		
		Соединение.Close();
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьПризнак1с()

#КонецОбласти

#Область ОбработкаНоменклатуры

&НаСервереБезКонтекста
Процедура СверкаДанныхНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID,
		|	dbo_Тип_номенклатурной_единицы.Наименование КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|ГДЕ
		|	НЕ dbo_Тип_номенклатурной_единицы.IsGroup";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СсылкаНомен = Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Наименование);
		
		Если СсылкаНомен<>Неопределено И СсылкаНомен<>Справочники.Номенклатура.ПустаяСсылка() Тогда
			Если Не СсылкаНомен.ЭтоГруппа Тогда
			
			    Сообщить(""+СсылкаНомен+" "+Строка(ВыборкаДетальныеЗаписи.ID));
				
				РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
				РегистрОбъектLS.Отбор.Объект.Установить(СсылкаНомен);
				РегистрОбъектLS.Очистить();
				
				НоваяЗапись = РегистрОбъектLS.Добавить();
				НоваяЗапись.Объект = СсылкаНомен;
				НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
				РегистрОбъектLS.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаДанныхНоменклатуры(Команда)
	СверкаДанныхНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНоменклатурыLSНаСервере()
	
	ТаблицаНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID,
		|	dbo_Тип_номенклатурной_единицы.Наименование КАК Наименование,
		|	dbo_Тип_номенклатурной_единицы.Устаревший КАК Устаревший,
		|	dbo_Тип_номенклатурной_единицы.Налог КАК Налог
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|ГДЕ
		|	НЕ dbo_Тип_номенклатурной_единицы.IsGroup
		|	И (dbo_Тип_номенклатурной_единицы.Устаревший = ЛОЖЬ
		|			ИЛИ dbo_Тип_номенклатурной_единицы.Устаревший ЕСТЬ NULL)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаНоменклатуры = ТаблицаНоменклатуры.Добавить();
		
		СтрокаТаблицаНоменклатуры.Номенклатура = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Номенклатура");
		СтрокаТаблицаНоменклатуры.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаНоменклатуры.НаименованиеLS = ВыборкаДетальныеЗаписи.Наименование;
		СтрокаТаблицаНоменклатуры.Устаревшие = ВыборкаДетальныеЗаписи.Устаревший;
		СтрокаТаблицаНоменклатуры.Налог = ВыборкаДетальныеЗаписи.Налог;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеНоменклатурыLS(Команда)
	ЗаполнитьДанныеНоменклатурыLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаНоменклатуры.ТекущиеДанные.ID;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаНоменклатуры.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаНоменклатуры.ТекущиеДанные.Номенклатура;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПользователей

&НаСервере
Процедура ЗаполнитьДанныеПользователейLSНаСервере()
	
	ТаблицаПользователей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Персона.ID КАК ID,
		|	dbo_Персона.Фамилия КАК Фамилия,
		|	dbo_Персона.Имя КАК Имя,
		|	dbo_Персона.Отчество КАК Отчество,
		|	dbo_Персона.Представление КАК Представление
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Персона.ID_Осн_Фирма = dbo_Контрагент.Ссылка
		|ГДЕ
		|	dbo_Контрагент.Свой";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаПользователей = ТаблицаПользователей.Добавить();
		
		СтрокаТаблицаПользователей.Пользователь = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Пользователи");
		СтрокаТаблицаПользователей.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаПользователей.НаименованиеLS = ВыборкаДетальныеЗаписи.Фамилия+" "+ВыборкаДетальныеЗаписи.Имя+" "+ВыборкаДетальныеЗаписи.Отчество;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПользователейLS(Команда)
	ЗаполнитьДанныеПользователейLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаПользователей.ТекущиеДанные.ID;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПользовательОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.Пользователь;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаКонтрагентов

&НаСервере
Процедура ЗаполнитьДанныеКонтрагентовLSНаСервере()
	
	ТаблицаКонтрагенты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Контрагент.ID КАК ID,
		|	dbo_Контрагент.ПолноеИмя КАК Наименование,
		|	dbo_Контрагент.КраткоеИмя КАК КраткоеИмя,
		|	dbo_Контрагент.ИНН КАК ИНН
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗКонтрагентыLS = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ID КАК ID,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.КраткоеИмя КАК КраткоеИмя,
		|	Контрагенты.ИНН КАК ИНН
		|ПОМЕСТИТЬ ВТ_КонтрагентыLS
		|ИЗ
		|	&ТЗКонтрагентыLS КАК Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыLogiSmart.Объект КАК Объект,
		|	ОбъектыLogiSmart.Валюта КАК Валюта,
		|	ОбъектыLogiSmart.ID_LS КАК ID_LS,
		|	ОбъектыLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ПОМЕСТИТЬ ВТ_Контаргенты1с
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|ГДЕ
		|	ОбъектыLogiSmart.Объект ССЫЛКА Справочник.Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Контаргенты1с.Объект КАК Контрагент,
		|	ВТ_Контаргенты1с.Валюта КАК Валюта,
		|	ВТ_Контаргенты1с.ID_LS КАК ID_LS,
		|	ВТ_Контаргенты1с.ДатаВремяИзменения КАК ДатаВремяИзменения,
		|	ВТ_КонтрагентыLS.ID КАК ID,
		|	ВТ_КонтрагентыLS.КраткоеИмя КАК КраткоеИмя,
		|	ВТ_КонтрагентыLS.ИНН КАК ИНН,
		|	ВТ_КонтрагентыLS.Наименование КАК Наименование
		|ИЗ
		|	ВТ_Контаргенты1с КАК ВТ_Контаргенты1с
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыLS КАК ВТ_КонтрагентыLS
		|		ПО ВТ_Контаргенты1с.ID_LS = ВТ_КонтрагентыLS.ID";
	
	Запрос.УстановитьПараметр("ТЗКонтрагентыLS", ТЗКонтрагентыLS);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаКонтрагенты = ТаблицаКонтрагенты.Добавить();
		
		//СтрокаТаблицаКонтрагенты.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Контрагенты");
		СтрокаТаблицаКонтрагенты.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
		СтрокаТаблицаКонтрагенты.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаКонтрагенты.НаименованиеLS = ВыборкаДетальныеЗаписи.Наименование;
		СтрокаТаблицаКонтрагенты.КраткоеИмя = ВыборкаДетальныеЗаписи.КраткоеИмя;
		СтрокаТаблицаКонтрагенты.ИНН = ВыборкаДетальныеЗаписи.ИНН;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКонтрагентовLS(Команда)
	ЗаполнитьДанныеКонтрагентовLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачальноеЗаполнениеКонтрагентовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Контрагент.ID КАК ID,
		|	dbo_Контрагент.ПолноеИмя КАК Наименование,
		|	dbo_Контрагент.КраткоеИмя КАК КраткоеИмя,
		|	dbo_Контрагент.ИНН КАК ИНН
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СсылкаКонтрагент = ПолучитьКонтрагента(ВыборкаДетальныеЗаписи.ИНН);
		
		Если СсылкаКонтрагент<>Неопределено И СсылкаКонтрагент<>Справочники.Контрагенты.ПустаяСсылка() Тогда
			Если Не СсылкаКонтрагент.ЭтоГруппа Тогда
			
			    Сообщить(""+СсылкаКонтрагент+" "+Строка(ВыборкаДетальныеЗаписи.ID));
				
				РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
				РегистрОбъектLS.Отбор.Объект.Установить(СсылкаКонтрагент);
				РегистрОбъектLS.Очистить();
				
				НоваяЗапись = РегистрОбъектLS.Добавить();
				НоваяЗапись.Объект = СсылкаКонтрагент;
				НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
				РегистрОбъектLS.Записать();
				
			КонецЕсли;
		Иначе 
			
			СсылкаКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Наименование);
			Если СсылкаКонтрагент<>Неопределено И СсылкаКонтрагент<>Справочники.Контрагенты.ПустаяСсылка() Тогда
				Если Не СсылкаКонтрагент.ЭтоГруппа Тогда
				
				    Сообщить(""+СсылкаКонтрагент+" "+Строка(ВыборкаДетальныеЗаписи.ID));
					
					РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
					РегистрОбъектLS.Отбор.Объект.Установить(СсылкаКонтрагент);
					РегистрОбъектLS.Очистить();
					
					НоваяЗапись = РегистрОбъектLS.Добавить();
					НоваяЗапись.Объект = СсылкаКонтрагент;
					НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
					РегистрОбъектLS.Записать();
					
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НачальноеЗаполнениеКонтрагентовНаСервере()

&НаКлиенте
Процедура НачальноеЗаполнениеКонтрагентов(Команда)
	НачальноеЗаполнениеКонтрагентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаКонтрагенты.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаКонтрагенты.ТекущиеДанные.Контрагент;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаКонтрагенты.ТекущиеДанные.ID;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДоговоров

&НаСервере
Процедура ЗаполнитьТипыДокументов()
	
	ТипыДокументов.Добавить(26, "ДТЛ: Договор с перевозчиком/экспедитором", Истина);
	ТипыДокументов.Добавить(63, "ДТЛ: Договор на ТЭО с клиентом", Истина);
	ТипыДокументов.Добавить(113, "ДТЛ: Договор с прочим поставщиком", Истина);
	ТипыДокументов.Добавить(91, "ДТЛ: Договор страхования ГО", Истина);
	ТипыДокументов.Добавить(106, "ДТЛ: Договор страхования груза", Истина);
	ТипыДокументов.Добавить(116, "ДТЛ: Допсоглашение с перевозчиком/экспедитором", Ложь);
	ТипыДокументов.Добавить(118, "ДТЛ: Допсоглашение с прочим поставщиком", Ложь);
	ТипыДокументов.Добавить(114, "ДТЛ: Допсолгашение на ТЭО с клиентом", Ложь);
	ТипыДокументов.Добавить(112, "ДТЛ: Приложение на ТЭО с клиентом", Ложь);
	ТипыДокументов.Добавить(115, "ДТЛ: Приложение с перевозчиком/экспедитором", Ложь);
	ТипыДокументов.Добавить(117, "ДТЛ: Приложение с прочим поставщиком", Ложь);
	ТипыДокументов.Добавить(50, "ДТО: Договор на ТО с клиентом", Истина);
	ТипыДокументов.Добавить(121, "ДТО: Договор с прочим поставщиком", Истина);
	ТипыДокументов.Добавить(120, "ДТО: Договор с СВХ/ТС", Истина);
	ТипыДокументов.Добавить(12, "ДТО: Договор страхования ГО ТП", Истина);
	ТипыДокументов.Добавить(125, "ДТО: Допсоглашение с прочим поставщиком", Ложь);
	ТипыДокументов.Добавить(123, "ДТО: Допсоглашение с СВХ/ТС", Ложь);
	ТипыДокументов.Добавить(124, "ДТО: Приложение с прочим поставщиком", Ложь);
	ТипыДокументов.Добавить(122, "ДТО: Приложение с СВХ/ТС", Ложь);
	
КонецПроцедуры // ЗаполнитьТипыДокументов()

&НаСервере
Процедура ЗаполнитьДанныеДоговорыLSНаСервере()
	ТаблицаДоговоры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Документ.Ссылка КАК Ссылка,
		|	dbo_Документ.ID КАК ID,
		|	dbo_Документ.ID_Контрагент КАК Контрагент,
		|	dbo_Документ.ID_Статус КАК ID_Статус,
		|	dbo_Документ.ID_Тип_Документа КАК ID_Тип_Документа,
		|	dbo_Документ.Описание КАК Описание,
		|	dbo_Документ.Дата_Регистрации КАК Дата_Регистрации,
		|	dbo_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Документ.Номер КАК Номер,
		|	dbo_Документ.Дата_начала_действия КАК Дата_начала_действия,
		|	dbo_Тип_Документа.Наименование КАК НаименованиеТипаДокумента,
		|	dbo_Контрагент.КраткоеИмя КАК КонтрагентLSИмя
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Документ КАК dbo_Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_Документа КАК dbo_Тип_Документа
		|		ПО dbo_Документ.ID_Тип_Документа = dbo_Тип_Документа.Ссылка
		|			И (dbo_Тип_Документа.ID В (&МассивТипов))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Документ.ID_Контрагент = dbo_Контрагент.Ссылка";
	
	
	МассивТипов = Новый Массив;

	Для Каждого ТипДок Из ТипыДокументов Цикл
		Если ТипДок.Пометка Тогда
			МассивТипов.Добавить(ТипДок.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивТипов", МассивТипов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВТ_LS = РезультатЗапроса.Выгрузить();
	
	ЗапросРегистр = Новый Запрос;
	ЗапросРегистр.Текст = 
		"ВЫБРАТЬ
		|	ВТ_LS.ID КАК ID,
		|	ВТ_LS.ID_Контрагент КАК ID_Контрагент,
		|	ВТ_LS.КонтрагентLSИмя КАК КонтрагентLSИмя,
		|	ВТ_LS.ID_Статус КАК ID_Статус,
		|	ВТ_LS.ID_Тип_Документа КАК ID_Тип_Документа,
		|	ВТ_LS.Описание КАК Описание,
		|	ВТ_LS.Дата_Регистрации КАК Дата_Регистрации,
		|	ВТ_LS.Номер КАК Номер,
		|	ВТ_LS.Дата_начала_действия КАК Дата_начала_действия,
		|	ВТ_LS.НаименованиеТипаДокумента КАК НаименованиеТипаДокумента
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ВТ_LS КАК ВТ_LS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		|	ОбъектыLogiSmart.Объект КАК Объект,
		|	ОбъектыLogiSmart.Валюта КАК Валюта,
		|	ОбъектыLogiSmart.ID_LS КАК ID_LS,
		|	ОбъектыLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ОбъектыLogiSmart.Объект = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ОбъектыLogiSmart.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ID КАК ID,
		|	ВТ.ID_Контрагент КАК ID_Контрагент,
		|	ВТ.ID_Статус КАК ID_Статус,
		|	ВТ.ID_Тип_Документа КАК ID_Тип_Документа,
		|	ВТ.Описание КАК Описание,
		|	ВТ.Дата_Регистрации КАК Дата_Регистрации,
		|	ВТ.Номер КАК Номер,
		|	ВТ.Дата_начала_действия КАК Дата_начала_действия,
		|	ВТ.НаименованиеТипаДокумента КАК НаименованиеТипаДокумента,
		|	ВТ_Договоры.Контрагент КАК Контрагент,
		|	ВТ_Договоры.Объект КАК Объект,
		|	ВТ_Договоры.Валюта КАК Валюта,
		|	ВТ_Договоры.ID_LS КАК ID_LS,
		|	ВТ_Договоры.ДатаВремяИзменения КАК ДатаВремяИзменения,
		|	ВТ.КонтрагентLSИмя КАК КонтрагентLSИмя
		|ИЗ
		|	ВТ_Договоры КАК ВТ_Договоры
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО ВТ_Договоры.ID_LS = ВТ.ID";
	
	ЗапросРегистр.УстановитьПараметр("ВТ_LS", ВТ_LS);
	РезультатЗапросаРегнистр = ЗапросРегистр.Выполнить();
	
	ВыборкаДетальныеЗаписиРегистр = РезультатЗапросаРегнистр.Выбрать();
	
	Пока ВыборкаДетальныеЗаписиРегистр.Следующий() Цикл
		
		СтрокаТаблицаДоговоры = ТаблицаДоговоры.Добавить();
		
		СтрокаТаблицаДоговоры.Контрагент = ВыборкаДетальныеЗаписиРегистр.Контрагент;
		СтрокаТаблицаДоговоры.ДоговорКонтрагента = ВыборкаДетальныеЗаписиРегистр.Объект;
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписиРегистр.Объект) Тогда
			СтрокаТаблицаДоговоры.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписиРегистр.ID_Контрагент, "Справочник.Контрагенты");
		КонецЕсли;
		СтрокаТаблицаДоговоры.Валюта = ВыборкаДетальныеЗаписиРегистр.Валюта;
		СтрокаТаблицаДоговоры.КонтрагентLS = ОбщийМодульItsLabs.ПолучитьОбъектСсылкаLS(ВыборкаДетальныеЗаписиРегистр.ID_Контрагент, "dbo_Контрагент"); 
		//СтрокаТаблицаДоговоры.ID_Договор = ВыборкаДетальныеЗаписиРегистр.ID_LS;
		СтрокаТаблицаДоговоры.ID_Договор = ВыборкаДетальныеЗаписиРегистр.ID;
		СтрокаТаблицаДоговоры.ДоговорLS = ОбщийМодульItsLabs.ПолучитьОбъектСсылкаLS(ВыборкаДетальныеЗаписиРегистр.ID, "dbo_Документ");
		СтрокаТаблицаДоговоры.НаименованиеКонтрагентLS = ВыборкаДетальныеЗаписиРегистр.КонтрагентLSИмя;
		СтрокаТаблицаДоговоры.ТипДоговора = ВыборкаДетальныеЗаписиРегистр.НаименованиеТипаДокумента;
		СтрокаТаблицаДоговоры.НаименованиеДоговорLS = "№ "+ВыборкаДетальныеЗаписиРегистр.Номер+" от "+ВыборкаДетальныеЗаписиРегистр.Дата_начала_действия;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДоговорыLS(Команда)
	ЗаполнитьДанныеДоговорыLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговорыДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаДоговоры.ТекущиеДанные.ID_Договор;
	СсылкаОбъект = Элементы.ТаблицаДоговоры.ТекущиеДанные.ДоговорКонтрагента;
	СсылкаОбъектВалюта = Элементы.ТаблицаДоговоры.ТекущиеДанные.Валюта;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина, СсылкаОбъектВалюта);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговорыДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВалютаДоговора = ОбщийМодульItsLabs.ПолучитьРеквизитШапкиПоСсылке(ВыбранноеЗначение, "ВалютаВзаиморасчетов");
	Элементы.ТаблицаДоговоры.ТекущиеДанные.Валюта = ВалютаДоговора;
	ID_LS = Элементы.ТаблицаДоговоры.ТекущиеДанные.ID_Договор;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS,,, ВалютаДоговора);
КонецПроцедуры
 
#КонецОбласти

#Область ОбработкаСчетов

&НаСервереБезКонтекста
Процедура УстановитьДоговорСКлиентом(ДоговорКонтрагента, Контрагент, Организация, ПодразделениеОрганизации, МассивВидовДоговоров, ВалютаВзаиморасчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ДоговорыКонтрагентов.Дата) КАК Дата
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Подразделение = &Подразделение
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора В(&МассивВидДоговора)
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыКонтрагентов.Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("МассивВидДоговора", МассивВидовДоговоров);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДоговорКонтрагента = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУслугуЭкспедирования(ID_Номенклатура)
	
	Номенклатура = ОбщийМодульItsLabs.ПолучитьОбъектПоID(ID_Номенклатура, "Справочник.Номенклатура");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УслугиЭкспедирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УслугиЭкспедирования КАК УслугиЭкспедирования
		|ГДЕ
		|	УслугиЭкспедирования.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 	
	КонецЕсли;
	
	Возврат Справочники.УслугиЭкспедирования.ПустаяСсылка(); 

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНалога(ВидНалогаСсылка)
	
	Если ВидНалогаСсылка=20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли ВидНалогаСсылка=18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;	
	ИначеЕсли ВидНалогаСсылка=10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;	
	ИначеЕсли ВидНалогаСсылка=0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;		
	КонецЕсли;		
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОперациюЭкспедирования(ВыборкаЗапросПлан, ПаспортНаПеревозку)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацияЭкспедирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияЭкспедирования КАК ОперацияЭкспедирования
		|ГДЕ
		|	ОперацияЭкспедирования.ID_LS = &ID_LS";
	
	Запрос.УстановитьПараметр("ID_LS", ВыборкаЗапросПлан.ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОперацияЭкспедирования = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОперацияЭкспедирования.РасчетСтоимости.Очистить();
	Иначе
		ОперацияЭкспедирования = Документы.ОперацияЭкспедирования.СоздатьДокумент();
	КонецЕсли;
	
	ОперацияЭкспедирования.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ОперацияЭкспедирования.ПаспортНаПеревозку = ПаспортНаПеревозку;
	ОперацияЭкспедирования.ID_LS = ВыборкаЗапросПлан.ID;
	ОперацияЭкспедирования.Дата = ?(ЗначениеЗаполнено(ВыборкаЗапросПлан.Дата_Начало), ВыборкаЗапросПлан.Дата_Начало, ПаспортНаПеревозку.Дата);

	СтрокаРасчетСтоимости = ОперацияЭкспедирования.РасчетСтоимости.Добавить();
	СтрокаРасчетСтоимости.Услуга = ПолучитьУслугуЭкспедирования(ВыборкаЗапросПлан.ID_Номенклатура);
	СтрокаРасчетСтоимости.СтавкаНДСПокупка = ПолучитьСтавкуНалога(ВыборкаЗапросПлан.ID_ВидНалогаР);
	СтрокаРасчетСтоимости.СтавкаНДСПокупкаФакт = ПолучитьСтавкуНалога(ВыборкаЗапросПлан.ID_ВидНалогаР_Факт);
	СтрокаРасчетСтоимости.СтавкаНДСПродажа = ПолучитьСтавкуНалога(ВыборкаЗапросПлан.ID_ВидНалога);
	СтрокаРасчетСтоимости.СтавкаНДСПродажаФакт = ПолучитьСтавкуНалога(ВыборкаЗапросПлан.ID_ВидНалога_Факт);
	
	//Валюта Рубль
	ВалютаРубль = Константы.ВалютаРегламентированногоУчета.Получить();
	
	//покупка
	Если ВыборкаЗапросПлан.ID_ВалютаРKOD<>0 Тогда
		ВалютаПокупки = Справочники.Валюты.НайтиПоКоду(ВыборкаЗапросПлан.ID_ВалютаРKOD);
		Если ВыборкаЗапросПлан.Расходы<>0 Тогда
			РасходыРубли = РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаЗапросПлан.Расходы, ВалютаПокупки, ВалютаРубль, ОперацияЭкспедирования.Дата); 
			СтрокаРасчетСтоимости.ЦенаПокупкиСНДС = РасходыРубли;
		    СтрокаРасчетСтоимости.СуммаПокупкиБезНДС = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						РасходыРубли, Истина, Ложь,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасчетСтоимости.СтавкаНДСПокупка));
			СтрокаРасчетСтоимости.СуммаПокупкиСНДС = РасходыРубли;		
		КонецЕсли;
	КонецЕсли;
	
	//Покупка Факт
	Если ВыборкаЗапросПлан.ID_ВалютаР_ФактKOD<>0 Тогда
		ВалютаПокупкиФакт = Справочники.Валюты.НайтиПоКоду(ВыборкаЗапросПлан.ID_ВалютаР_ФактKOD);
		Если ВыборкаЗапросПлан.Расходы_Факт<>0 Тогда
		    Расходы_ФактРубли = РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаЗапросПлан.Расходы_Факт, ВалютаПокупкиФакт, ВалютаРубль, ОперацияЭкспедирования.Дата); 
			СтрокаРасчетСтоимости.ЦенаПокупкиСНДСФакт = Расходы_ФактРубли;
			СтрокаРасчетСтоимости.СуммаПокупкиБезНДСФакт = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						Расходы_ФактРубли, Истина, Ложь,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасчетСтоимости.СтавкаНДСПокупкаФакт));
			СтрокаРасчетСтоимости.СуммаПокупкиСНДСФакт = Расходы_ФактРубли;			
		КонецЕсли;
	КонецЕсли;
	
	//Продажа
	Если ВыборкаЗапросПлан.ID_ВалютаДKOD<>0 Тогда
		ВалютаПродажи = Справочники.Валюты.НайтиПоКоду(ВыборкаЗапросПлан.ID_ВалютаДKOD);
		Если ВыборкаЗапросПлан.Доходы<>0 Тогда
			ДоходыРубли = РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаЗапросПлан.Доходы, ВалютаПродажи, ВалютаРубль, ОперацияЭкспедирования.Дата); 
			СтрокаРасчетСтоимости.ЦенаПродажиСНДС = ДоходыРубли;
			СтрокаРасчетСтоимости.СуммаПродажиБезНДС = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						ДоходыРубли, Истина, Ложь,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасчетСтоимости.СтавкаНДСПродажа));
			СтрокаРасчетСтоимости.СуммаПродажиСНДС = ДоходыРубли;		
		КонецЕсли;
	КонецЕсли; 
	
	//Продажа факт
	Если ВыборкаЗапросПлан.ID_ВалютаД_ФактKOD<>0 Тогда
		ВалютаПродажиФакт = Справочники.Валюты.НайтиПоКоду(ВыборкаЗапросПлан.ID_ВалютаД_ФактKOD);
		Если ВыборкаЗапросПлан.Доходы_Факт<>0 Тогда
			Доходы_ФактРубли = РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыборкаЗапросПлан.Доходы_Факт, ВалютаПродажиФакт, ВалютаРубль, ОперацияЭкспедирования.Дата); 
			СтрокаРасчетСтоимости.ЦенаПродажиСНДСФакт = Доходы_ФактРубли;
			СтрокаРасчетСтоимости.СуммаПродажиБезНДСФакт = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							Доходы_ФактРубли, Истина, Ложь,
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасчетСтоимости.СтавкаНДСПродажаФакт));
			СтрокаРасчетСтоимости.СуммаПродажиСНДСФакт = Доходы_ФактРубли;			
		КонецЕсли;
	КонецЕсли;
	
	ОперацияЭкспедирования.Записать(РежимЗаписиДокумента.Запись);
		
	Возврат ОперацияЭкспедирования.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПаспортНаПеревозку(РеференсЗаказа, СтруктураПаспортаНаПеревозку, ПаспортСсылка = Неопределено)
	Перем НовыйПаспотр;
	
	Если ПаспортСсылка=Неопределено  Или ПаспортСсылка=Документы.ЗаявкаНаПеревозку.ПустаяСсылка() Тогда
		ПаспортНаПеревозку = Документы.ЗаявкаНаПеревозку.СоздатьДокумент();	
		НовыйПаспотр = Истина;
	Иначе
		ПаспортНаПеревозку = ПаспортСсылка.ПолучитьОбъект();
		НовыйПаспотр = Ложь;
	КонецЕсли;
	
	ПаспортНаПеревозку.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ПаспортНаПеревозку.Номер = РеференсЗаказа;
	ПаспортНаПеревозку.Дата = СтруктураПаспортаНаПеревозку.Дата;
	ПаспортНаПеревозку.СтатусЗаявки = СтруктураПаспортаНаПеревозку.Статус;
	ПаспортНаПеревозку.ДатаЗавершенияОперационно = СтруктураПаспортаНаПеревозку.ДатаЗавершеноОперационно;
	//Если НовыйПаспотр Тогда
		ПаспортНаПеревозку.ДатаЗавершенияУправления = СтруктураПаспортаНаПеревозку.ДатаЗавершенияУправления;
	//Иначе
	//	Если ПаспортНаПеревозку.ДатаЗавершенияУправления= Дата(1, 1, 1) Тогда
	//		ПаспортНаПеревозку.ДатаЗавершенияУправления = СтруктураПаспортаНаПеревозку.ДатаЗавершеноОперационно;
	//	КонецЕсли;
	//КонецЕсли;
	ПаспортНаПеревозку.Организация = СтруктураПаспортаНаПеревозку.Организация;
	ПаспортНаПеревозку.Подразделение = СтруктураПаспортаНаПеревозку.Подразделение;
	ПаспортНаПеревозку.Контрагент = СтруктураПаспортаНаПеревозку.Контрагент;
	ПаспортНаПеревозку.Исполнитель = СтруктураПаспортаНаПеревозку.Ответственный;
	ПаспортНаПеревозку.ЗагруженИзLogiSmart = Истина;
	
	ПаспортНаПеревозку.Записать();

	ДобавитьВРегистраПаспорт(ПаспортНаПеревозку.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Запрос_План.ID_Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаР, ""Нет"") КАК ID_ВалютаР,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаД, ""Нет"") КАК ID_ВалютаД,
		|	ЕСТЬNULL(dbo_Запрос_План.Расходы, 0) КАК Расходы,
		|	ЕСТЬNULL(dbo_Запрос_План.Доходы, 0) КАК Доходы,
		|	dbo_Запрос_План.Дата_Начало_Факт КАК Дата_Начало_Факт,
		|	dbo_Запрос_План.Дата_Окончание_Факт КАК Дата_Окончание_Факт,
		|	dbo_Запрос_План.Длительность_Факт КАК Длительность_Факт,
		|	dbo_Запрос_План.ID_Длительность_Факт КАК ID_Длительность_Факт,
		|	ЕСТЬNULL(dbo_Запрос_План.Расходы_Факт, 0) КАК Расходы_Факт,
		|	ЕСТЬNULL(dbo_Запрос_План.Доходы_Факт, 0) КАК Доходы_Факт,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаР_Факт, ""Нет"") КАК ID_ВалютаР_Факт,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаД_Факт, ""Нет"") КАК ID_ВалютаД_Факт,
		|	dbo_Запрос_План.ID КАК ID,
		|	dbo_Запрос_План.ID_ВидНалога КАК ID_ВидНалога,
		|	dbo_Запрос_План.ID_ВидНалогаР КАК ID_ВидНалогаР,
		|	dbo_Запрос_План.ID_ВидНалога_Факт КАК ID_ВидНалога_Факт,
		|	dbo_Запрос_План.ID_ВидНалогаР_Факт КАК ID_ВидНалогаР_Факт,
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID_Номенклатура,
		|	dbo_Запрос_План.Дата_Начало КАК Дата_Начало,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаР.KOD, 0) КАК ID_ВалютаРKOD,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаД.KOD, 0) КАК ID_ВалютаДKOD,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаР_Факт.KOD, 0) КАК ID_ВалютаР_ФактKOD,
		|	ЕСТЬNULL(dbo_Запрос_План.ID_ВалютаД_Факт.KOD, 0) КАК ID_ВалютаД_ФактKOD
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_План КАК dbo_Запрос_План
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|		ПО dbo_Запрос_План.ID_Номенклатура = dbo_Тип_номенклатурной_единицы.Ссылка
		|ГДЕ
		|	dbo_Запрос_План.ID_Заказ = &ID_Заказ";
	
	СсылкаЗаказLS = ВнешниеИсточникиДанных.LogiSmart.Таблицы.dbo_Запрос_Клиента.НайтиПоПолю("НомерРеференса", РеференсЗаказа);
	
	Запрос.УстановитьПараметр("ID_Заказ", СсылкаЗаказLS);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		
		ОперацияЭкспедирования = ПолучитьОперациюЭкспедирования(ВыборкаДетальныеЗаписи, ПаспортНаПеревозку.Ссылка);
		
		СтрокаМаршруты = ПаспортНаПеревозку.Маршруты.Найти(ОперацияЭкспедирования, "ОперацияЭкспедирования");	
		
		Если СтрокаМаршруты=Неопределено Тогда
			СтрокаМаршруты = ПаспортНаПеревозку.Маршруты.Добавить();
		КонецЕсли;
		
		СтрокаМаршруты.ОперацияЭкспедирования = ОперацияЭкспедирования;
		
	КонецЦикла;
	
	ПаспортНаПеревозку.Записать();
	
	Возврат ПаспортНаПеревозку.Ссылка;
	
КонецФункции // СоздатьПаспортНаПеревозку()

&НаСервере
Функция ПолучитьПаспортНаПеревозку(РеференсЗаказа, СтруктураПаспортаНаПеревозку = Неопределено)
	
	//Если СтруктураПаспортаНаПеревозку = Неопределено Тогда
		
		СтруктураПаспортаНаПеревозку = Новый Структура("Организация, Подразделение, Контрагент, Ответственный, Дата, Статус, ДатаЗавершеноОперационно, ДатаЗавершенияУправления");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	dbo_Запрос_Клиента.Ссылка КАК Ссылка,
			|	dbo_Запрос_Клиента.ID КАК ID,
			|	dbo_Запрос_Клиента.НомерРеференса КАК НомерРеференса,
			|	dbo_Запрос_Клиента.ID_СтатусЗапроса КАК СтатусЗапроса,
			|	dbo_Статус_Запроса.Статус КАК Представление,
			|	dbo_Запрос_Клиента.ID_Заказчик КАК Заказчик,
			|	dbo_Запрос_Клиента.ID_Номинальный_клиент КАК Номинальный_клиент,
			|	dbo_Запрос_Клиента.ID_Плательщик КАК Плательщик,
			|	dbo_Запрос_Клиента.ID_Маршрут КАК Маршрут,
			|	dbo_Запрос_Клиента.ID_НасПункт_Откуда КАК НасПункт_Откуда,
			|	dbo_Запрос_Клиента.ID_НасПункт_Куда КАК НасПункт_Куда,
			|	dbo_Запрос_Клиента.ID_Грузоотправитель КАК Грузоотправитель,
			|	dbo_Запрос_Клиента.ID_Грузополучатель КАК Грузополучатель,
			|	dbo_Запрос_Клиента.ID_Контакт_Грузоотправитель КАК Контакт_Грузоотправитель,
			|	dbo_Запрос_Клиента.ID_Контакт_Грузополучатель КАК Контакт_Грузополучатель,
			|	dbo_Запрос_Клиента.ID_Место_Отправления КАК Место_Отправления,
			|	dbo_Запрос_Клиента.ID_Место_Назначения КАК Место_Назначения,
			|	dbo_Запрос_Клиента.ID_Адрес_Отправления КАК Адрес_Отправления,
			|	dbo_Запрос_Клиента.ID_Адрес_Назначения КАК Адрес_Назначения,
			|	dbo_Запрос_Клиента.ID_СобственнаяФирма КАК СобственнаяФирма,
			|	dbo_Запрос_Клиента.ID_Менеджер КАК Менеджер,
			|	dbo_Контрагент.ID КАК ID_Контрагент,
			|	dbo_Запрос_Клиента.ID_Договор_Экспедирование.ID КАК ID_Договор,
			|	dbo_Персона.ID КАК ID_Менеджер,
			|	dbo_Запрос_Клиента.Дата КАК Дата,
			|	dbo_Подразделения.ID КАК ID_Подразделение,
			|	dbo_Запрос_Клиента.ДатаЗавершенияОперационно КАК ДатаЗавершенияОперационно
			|ИЗ
			|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_Клиента КАК dbo_Запрос_Клиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Статус_Запроса КАК dbo_Статус_Запроса
			|		ПО dbo_Запрос_Клиента.ID_СтатусЗапроса = dbo_Статус_Запроса.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
			|		ПО dbo_Запрос_Клиента.ID_Заказчик = dbo_Контрагент.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Подразделения КАК dbo_Подразделения
			|			ПО dbo_Персона.ID_Подразделение = dbo_Подразделения.Ссылка
			|		ПО dbo_Запрос_Клиента.ID_Менеджер = dbo_Персона.Ссылка
			|ГДЕ
			|	dbo_Запрос_Клиента.НомерРеференса = &НомерРеференса";
		
		Запрос.УстановитьПараметр("НомерРеференса", РеференсЗаказа);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			СтруктураПаспортаНаПеревозку.Организация = ПолучитьОрганизацию(); 
			СтруктураПаспортаНаПеревозку.Подразделение = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Подразделение, "Справочник.ПодразделенияОрганизаций");
			СтруктураПаспортаНаПеревозку.Статус =  ПолучитьСтатусЗаказа(ВыборкаДетальныеЗаписи.Представление);
			СтруктураПаспортаНаПеревозку.ДатаЗавершеноОперационно = ВыборкаДетальныеЗаписи.ДатаЗавершенияОперационно;
			ДатаУстановкиЗавершеноОперационно = ПолучитьДатаУстановкиЗавершеноОперационно(ВыборкаДетальныеЗаписи.ID);
			Если ЗначениеЗаполнено(СтруктураПаспортаНаПеревозку.ДатаЗавершеноОперационно) Тогда
				Если ДатаУстановкиЗавершеноОперационно - КонецМесяца(СтруктураПаспортаНаПеревозку.ДатаЗавершеноОперационно)<=10 Тогда
					СтруктураПаспортаНаПеревозку.ДатаЗавершенияУправления = СтруктураПаспортаНаПеревозку.ДатаЗавершеноОперационно;
				Иначе	
					СтруктураПаспортаНаПеревозку.ДатаЗавершенияУправления = НачалоМесяца(ДатаУстановкиЗавершеноОперационно);
				КонецЕсли;
			КонецЕсли;
			СтруктураПаспортаНаПеревозку.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Контрагент, "Справочник.Контрагенты");
			СтруктураПаспортаНаПеревозку.Ответственный = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Менеджер, "Справочник.Пользователи");
			СтруктураПаспортаНаПеревозку.Дата = ВыборкаДетальныеЗаписи.Дата;
			
		КонецЕсли;
		
	//КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаПеревозку.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаПеревозку КАК ЗаявкаНаПеревозку
		|ГДЕ
		|	ЗаявкаНаПеревозку.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", РеференсЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе 
		Возврат СоздатьПаспортНаПеревозку(РеференсЗаказа, СтруктураПаспортаНаПеревозку); 
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокиСчета(IDСчета, НастройкиСворачивания = Неопределено)

	ТЗВозврат = Новый ТаблицаЗначений;
	ТЗВозврат.Колонки.Добавить("Номенклатура");
	ТЗВозврат.Колонки.Добавить("ID_НоменклатурнаяЕдиница");
	ТЗВозврат.Колонки.Добавить("Содержание");
	ТЗВозврат.Колонки.Добавить("СтавкаНДС");
	ТЗВозврат.Колонки.Добавить("Цена");
	ТЗВозврат.Колонки.Добавить("Количество");
	ТЗВозврат.Колонки.Добавить("СуммаНДС");
	ТЗВозврат.Колонки.Добавить("Сумма");
	ТЗВозврат.Колонки.Добавить("НомерРеференсаЗаказа");
	
	Запрос = Новый Запрос;
	
	Если НастройкиСворачивания<>Неопределено И НастройкиСворачивания.ВыставлятьОднойУслугой Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	dbo_Контейнер_Услуги_Счета.ID_Счет КАК ID_Счет,
			|	dbo_viewContForSchet.НомерРеференсаЗаказа КАК НомерРеференсаЗаказа,
			|	ЕСТЬNULL(dbo_Контейнер_Услуги_Счета.Налог, ""Без НДС"") КАК Налог,
			|	СУММА(dbo_Контейнер_Услуги_Счета.Количество) КАК Количество,
			|	СУММА(dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета) / СУММА(dbo_Контейнер_Услуги_Счета.Количество) КАК Цена,
			|	СУММА(dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета) КАК Сумма,
			|	СУММА(dbo_Контейнер_Услуги_Счета.СуммаНалогаВалСчета) КАК СуммаНДС
			|ИЗ
			|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контейнер_Услуги_Счета КАК dbo_Контейнер_Услуги_Счета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
			|		ПО dbo_Контейнер_Услуги_Счета.ID_Счет = dbo_Счет.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_viewContForSchet КАК dbo_viewContForSchet
			|		ПО dbo_Контейнер_Услуги_Счета.ID = dbo_viewContForSchet.ID
			|ГДЕ
			|	dbo_Контейнер_Услуги_Счета.ID_Счет = &ID_Счет
			|
			|СГРУППИРОВАТЬ ПО
			|	dbo_Контейнер_Услуги_Счета.ID_Счет,
			|	ЕСТЬNULL(dbo_Контейнер_Услуги_Счета.Налог, ""Без НДС""),
			|	dbo_viewContForSchet.НомерРеференсаЗаказа";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	dbo_Контейнер_Услуги_Счета.Ссылка КАК Ссылка,
			|	dbo_Контейнер_Услуги_Счета.ID КАК ID,
			|	dbo_Контейнер_Услуги_Счета.ID_Счет КАК ID_Счет,
			|	dbo_Контейнер_Услуги_Счета.ID_НоменклатурнаяЕдиница.ID КАК ID_НоменклатурнаяЕдиница,
			|	dbo_Контейнер_Услуги_Счета.НаименованиеДляВыставления КАК Содержание,
			|	dbo_Контейнер_Услуги_Счета.НаименованиеДляВыставленияАнгл КАК НаименованиеДляВыставленияАнгл,
			|	ЕСТЬNULL(dbo_Контейнер_Услуги_Счета.Налог, ""Без НДС"") КАК Налог,
			|	dbo_Контейнер_Услуги_Счета.Курс КАК Курс,
			|	dbo_Контейнер_Услуги_Счета.Количество КАК Количество,
			|	dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета / dbo_Контейнер_Услуги_Счета.Количество КАК Цена,
			|	dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета КАК Сумма,
			|	dbo_Контейнер_Услуги_Счета.СуммаНалогаВалСчета КАК СуммаНДС,
			|	dbo_viewContForSchet.НомерРеференсаЗаказа КАК НомерРеференсаЗаказа,
			|	dbo_Контейнер_Услуги_Счета.ID_Валюта КАК ID_Валюта,
			|	ЕСТЬNULL(dbo_Контрагент.ПризнакНерезидента, ЛОЖЬ) КАК ПризнакНерезидента
			|ИЗ
			|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контейнер_Услуги_Счета КАК dbo_Контейнер_Услуги_Счета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
			|			ПО dbo_Счет.ID_Контрагент = dbo_Контрагент.Ссылка
			|		ПО dbo_Контейнер_Услуги_Счета.ID_Счет = dbo_Счет.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_viewContForSchet КАК dbo_viewContForSchet
			|		ПО dbo_Контейнер_Услуги_Счета.ID = dbo_viewContForSchet.ID
			|ГДЕ
			|	dbo_Контейнер_Услуги_Счета.ID_Счет = &ID_Счет";
	КонецЕсли;
	
		
	
	СсылкаЗаписьВнешнийИсточник = ВнешниеИсточникиДанных.LogiSmart.Таблицы.dbo_Счет.ПолучитьСсылку(IDСчета);
	Запрос.УстановитьПараметр("ID_Счет", СсылкаЗаписьВнешнийИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЗВозврат = ТЗВозврат.Добавить();  
		ЗаполнитьЗначенияСвойств(СтрокаТЗВозврат, ВыборкаДетальныеЗаписи);
		Если НастройкиСворачивания<>Неопределено И НастройкиСворачивания.ВыставлятьОднойУслугой Тогда
			СтрокаТЗВозврат.Номенклатура = ПолучитьОбъект(НастройкиСворачивания.ID_УслугаСтрока.ID, "Справочник.Номенклатура");
			СтрокаТЗВозврат.Содержание = НастройкиСворачивания.Заметки;
		Иначе
			СтрокаТЗВозврат.Номенклатура = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_НоменклатурнаяЕдиница, "Справочник.Номенклатура");
			СтрокаТЗВозврат.Содержание = ВыборкаДетальныеЗаписи.Содержание + ?(ВыборкаДетальныеЗаписи.ПризнакНерезидента Или ВыборкаДетальныеЗаписи.ПризнакНерезидента=Null, "/"+ВыборкаДетальныеЗаписи.НаименованиеДляВыставленияАнгл, "");
		КонецЕсли;
		СтрокаТЗВозврат.СтавкаНДС = ПолучитьСтавку(ВыборкаДетальныеЗаписи.Налог);
		
	КонецЦикла;
	
	Возврат ТЗВозврат;
	
КонецФункции // ПолучитьСтрокиСчета()

&НаСервереБезКонтекста
Функция ПолучитьСписок_ТС_ТЕ(ID_Счет)

	МассивТС_ТЕ = Новый Массив;
	Массив_НомерУКлиента = Новый Массив;
	СтруктураВозвтрат = Новый Структура("ТС_ТЕ, НомерУКлиента");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Запрос_План_ДопПоля.ТЕ КАК ТЕ,
		|	dbo_Запрос_План_ДопПоля.ТС КАК ТС,
		|	dbo_Запрос_Клиента.НомерУКлиента КАК НомерУКлиента
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_Клиента КАК dbo_Запрос_Клиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_План КАК dbo_Запрос_План
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_План_ДопПоля КАК dbo_Запрос_План_ДопПоля
		|			ПО dbo_Запрос_План.Ссылка = dbo_Запрос_План_ДопПоля.ID_Разнарядка
		|		ПО dbo_Запрос_Клиента.Ссылка = dbo_Запрос_План.ID_Заказ
		|ГДЕ
		|	dbo_Запрос_Клиента.НомерРеференса В
		|			(ВЫБРАТЬ
		|				dbo_viewContForSchet.НомерРеференсаЗаказа КАК НомерРеференсаЗаказа
		|			ИЗ
		|				ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_viewContForSchet КАК dbo_viewContForSchet
		|			ГДЕ
		|				dbo_viewContForSchet.ID_Счет = &ID_Счет)";
	
	Запрос.УстановитьПараметр("ID_Счет", ID_Счет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Массив_НомерУКлиента.Найти(ВыборкаДетальныеЗаписи.НомерУКлиента)=Неопределено Тогда
			Массив_НомерУКлиента.Добавить(ВыборкаДетальныеЗаписи.НомерУКлиента);
		КонецЕсли;
		
		Если МассивТС_ТЕ.Найти(ВыборкаДетальныеЗаписи.ТЕ)=Неопределено Тогда
			МассивТС_ТЕ.Добавить(ВыборкаДетальныеЗаписи.ТЕ);	
		КонецЕсли;
		
		Если МассивТС_ТЕ.Найти(ВыборкаДетальныеЗаписи.ТС)=Неопределено Тогда
			МассивТС_ТЕ.Добавить(ВыборкаДетальныеЗаписи.ТС);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозвтрат.ТС_ТЕ = МассивТС_ТЕ;
	СтруктураВозвтрат.НомерУКлиента = Массив_НомерУКлиента;
	
	Возврат СтруктураВозвтрат;
	
КонецФункции // ПолучитьСписок_ТС_ТЕ()
 

&НаСервере
Функция СоздатьСчет(СтруктураСчета, СчётНаОплатуСсылка)

	ТекДата = ТекущаяДата();
	
	Попытка
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
		Блокировка.Заблокировать();
		//
		//ПодразделениеОрганизации = ПолучитьПодразделение();
		ДатаСчета = СтруктураСчета.Дата_Выставления;
		
		Если СчётНаОплатуСсылка=Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
			СчётНаОплатуОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		Иначе 	
			СчётНаОплатуОбъект = СчётНаОплатуСсылка.ПолучитьОбъект();
			СчётНаОплатуОбъект.Товары.Очистить();
		КонецЕсли;
		
		СчётНаОплатуОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		//СчётНаОплатуОбъект.Номер = ПолучитьНомерНовогоСчета(ПодразделениеОрганизации, ДатаСчета);
		//СчётНаОплатуОбъект.Дата = ДатаСчета;
		СчётНаОплатуОбъект.Номер = СтруктураСчета.НомерСчета;
		СчётНаОплатуОбъект.Дата = СтруктураСчета.Дата_Выставления;
		СчётНаОплатуОбъект.ВалютаДокумента = ПолучитьВалюта(СтруктураСчета.KOD_Валюта);
		СчётНаОплатуОбъект.Организация = ПолучитьОрганизацию();
		СчётНаОплатуОбъект.ОрганизацияПолучатель = ПолучитьОрганизацию();
		//СчётНаОплатуОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СчётНаОплатуОбъект.Контрагент = ПолучитьОбъект(СтруктураСчета.ID_Контрагент, "Справочник.Контрагенты");//учитьКонтрагента(СтруктураСчета.ИННКонтрагента);
		
		//ДоговорКонтрагента = ПолучитьОбъект(СтруктураСчета.ID_Договор, "Справочник.ДоговорыКонтрагентов");
		//ДоговорКонтрагента = ОбщийМодульItsLabs.ПолучитьОбъектПоID(СтруктураСчета.ID_Договор, "Справочник.ДоговорыКонтрагентов", СчётНаОплатуОбъект.ВалютаДокумента);
		ДоговорКонтрагента = ПолучитьОбъектПоID(СтруктураСчета.ID_Договор, "Справочник.ДоговорыКонтрагентов", СчётНаОплатуОбъект.ВалютаДокумента);
		Если ДоговорКонтрагента=Неопределено Тогда
			УстановитьДоговорСКлиентом(СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.Организация, СчётНаОплатуОбъект.ПодразделениеОрганизации, 
			ПолучитьМассивВидовДоговоров(), СчётНаОплатуОбъект.ВалютаДокумента);
		Иначе
			СчётНаОплатуОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
		СчётНаОплатуОбъект.Комментарий = СтруктураСчета.Комментарий;
		СчётНаОплатуОбъект.Ответственный = ПолучитьОбъект(СтруктураСчета.IDОтветственный, "Справочник.Пользователи");
		СчётНаОплатуОбъект.НомерТаможеннойДекларации = СтруктураСчета.ТД;
		СтруктураДанных = ПолучитьСписок_ТС_ТЕ(СтруктураСчета.ID);
		
		СчётТД = "";
		 
		РазмерМассива = СтруктураДанных.ТС_ТЕ.Количество();
		С_чик = 0;
		Для каждого ТС_ТЕ Из СтруктураДанных.ТС_ТЕ Цикл
			С_чик = С_чик + 0;
			СчётТД = СчётТД + ТС_ТЕ;
			Если РазмерМассива<С_чик Тогда
				СчётТД = СчётТД + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		НомерЗаказаУКлиента = "";
		Ном = 0;
		КолНомерУКлиента = СтруктураДанных.НомерУКлиента.Количество();
		Для каждого НомерУКлиента Из СтруктураДанных.НомерУКлиента Цикл
			Ном = Ном + 1;
			НомерЗаказаУКлиента = НомерЗаказаУКлиента + НомерУКлиента + ?(КолНомерУКлиента>Ном, ", ", "");
		КонецЦикла;
		
		СчётНаОплатуОбъект.ТД = СчётТД;
		СчётНаОплатуОбъект.НомерПорученияЭкспедитору = СтруктураСчета.НомерПорученияЭкспедитору;
		СчётНаОплатуОбъект.КомментарийПоСчету = СтруктураСчета.КомментарийПоСчету;
		СчётНаОплатуОбъект.НомерЗаказаУКлиента = НомерЗаказаУКлиента;
		
		Если ЗначениеЗаполнено(СчётНаОплатуОбъект.Ответственный) Тогда
			Если ЗначениеЗаполнено(СчётНаОплатуОбъект.Ответственный.ФизическоеЛицо) Тогда
				СчётНаОплатуОбъект.Руководитель = СчётНаОплатуОбъект.Ответственный.ФизическоеЛицо;
				СчётНаОплатуОбъект.ЗаРуководителяНаОсновании = Справочники.ОснованияПраваПодписи.ОснованиеПраваПодписиФизЛица(СчётНаОплатуОбъект.Руководитель, СчётНаОплатуОбъект.Организация, СчётНаОплатуОбъект.Дата);
				СчётНаОплатуОбъект.ГлавныйБухгалтер = СчётНаОплатуОбъект.Ответственный.ФизическоеЛицо;
				СчётНаОплатуОбъект.ЗаГлавногоБухгалтераНаОсновании = Справочники.ОснованияПраваПодписи.ОснованиеПраваПодписиФизЛица(СчётНаОплатуОбъект.Руководитель, СчётНаОплатуОбъект.Организация, СчётНаОплатуОбъект.Дата);
			КонецЕсли;
		КонецЕсли;
		СчётНаОплатуОбъект.СуммаВключаетНДС = Истина;
		
		СчётНаОплатуОбъект.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерСчета+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетныеСчетаДляКонтрагентаСрезПоследних.РасчетныйСчет
			|ИЗ
			|	РегистрСведений.РасчетныеСчетаДляКонтрагента.СрезПоследних(
			|			,
			|			Организация = &Организация
			|				И Контрагент = &Контрагент) КАК РасчетныеСчетаДляКонтрагентаСрезПоследних";
		
		Запрос.УстановитьПараметр("Контрагент", СчётНаОплатуОбъект.Контрагент);
		Запрос.УстановитьПараметр("Организация", СчётНаОплатуОбъект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчётНаОплатуОбъект.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.РасчетныйСчет
		Иначе 
			мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			СчётНаОплатуОбъект.СтруктурнаяЕдиница = Справочники.БанковскиеСчета.ПустаяСсылка();
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчётНаОплатуОбъект.СтруктурнаяЕдиница, СчётНаОплатуОбъект.Организация, мВалютаРегламентированногоУчета);
		КонецЕсли;
		
		НастройкиСворачивания = Новый Структура("СворачиватьБезЦеныБезВалютыУслуги, ТипНоменклатурыДляСворачивания, ВыставлятьОднойУслугой, ID_УслугаСтрока, Заметки", 
								СтруктураСчета.СворачиватьБезЦеныБезВалютыУслуги, СтруктураСчета.ТипНоменклатурыДляСворачивания, СтруктураСчета.ВыставлятьОднойУслугой, СтруктураСчета.ID_УслугаСтрока, СтруктураСчета.Заметки);
		
		ТЗСтрокиСчёта = ПолучитьСтрокиСчета(СтруктураСчета.ID, НастройкиСворачивания);
		
		Для каждого СтрокаТЗСтрокиСчёта Из ТЗСтрокиСчёта Цикл
			
			СтрокаТовары = СчётНаОплатуОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТЗСтрокиСчёта);
			
		КонецЦикла;
		
		СтруктураПаспортанаПеревозку = Новый Структура("Организация, ПодразделениеОрганизации, Контрагент, ДоговорКонтрагента, Ответственный, Дата", 
			СчётНаОплатуОбъект.Организация, СчётНаОплатуОбъект.ПодразделениеОрганизации, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Ответственный, СчётНаОплатуОбъект.Дата);
			
		ПаспортНаПеревозку = ПолучитьПаспортНаПеревозку(ТЗСтрокиСчёта[0].НомерРеференсаЗаказа, СтруктураПаспортанаПеревозку);
		СчётНаОплатуОбъект.ПаспортНаПеревозку = ПаспортНаПеревозку;
		
		СчётНаОплатуОбъект.ПодразделениеОрганизации = ПаспортНаПеревозку.Подразделение;
		СчётНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		СчётНаОплатуСсылка = СчётНаОплатуОбъект.Ссылка;
		
		СрокОплаты = Расш1_ОбщийМодуль.ПолучитьСрокОплатыПоДоговору(СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Дата);
		СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчётНаОплатуСсылка, СрокОплаты);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат СчётНаОплатуСсылка;
	
КонецФункции // СоздатьСчет()

&НаСервере
Функция ПолучитьМассивIDФл(ИмяТаблицы, МассивПринудительно = Неопределено)

	ТЗ = РеквизитФормыВЗначение(ИмяТаблицы, Тип("ТаблицаЗначений"));
	Структура = Новый Структура("Фл", Истина);
	МассивСтрок = ТЗ.НайтиСтроки(Структура);
	
	МассивIDФл = Новый Массив;
	Для каждого Строка Из МассивСтрок Цикл
	
		МассивIDФл.Добавить(Строка.ID);
	
	КонецЦикла;
	
	Если МассивПринудительно<>Неопределено Тогда
	
		Структура = Новый Структура("ФлПринудительно", Истина);
		МассивСтрок = ТЗ.НайтиСтроки(Структура);
		
		Для каждого Строка Из МассивСтрок Цикл
			МассивПринудительно.Добавить(Строка.ID);
		КонецЦикла;	
	
	КонецЕсли;
	
	
	Возврат МассивIDФл;
	
КонецФункции // ПолучитьМассивIDФл()

&НаСервере
Процедура ПоместитьСчетКлиентуВТаблицу(ID, СчётСсылка)
	
	ПараметрыОтбора = Новый Структура("ID", ID);
	СтрокиТаблицаСчетКлиенту = ТаблицаСчетов.НайтиСтроки(ПараметрыОтбора);
	Для каждого СтрокаТаблицаСчетКлиенту Из СтрокиТаблицаСчетКлиенту Цикл
		
		СтрокаТаблицаСчетКлиенту.СчётНаОплату = СчётСсылка;	
	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСчетовНаСервере()
	
	МассивПринудительно = Новый Массив;
	МассивIDФл = ПолучитьМассивIDФл("ТаблицаСчетов", МассивПринудительно);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаНаОплатуLogiSmart.ID_LS КАК ID_LS,
		|	СчетаНаОплатуLogiSmart.Объект КАК СчётНаОплатуСсылка,
		|	СчетаНаОплатуLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК СчетаНаОплатуLogiSmart
		|ГДЕ
		|	СчетаНаОплатуLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПокупателю
		|	И СчетаНаОплатуLogiSmart.ID_LS В(&МассивIDФл)";
	
	Запрос.УстановитьПараметр("МассивIDФл", МассивIDФл);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МинДатаВремяИзменения = КонецДня(ТекущаяДата());
	МассивIDLS = Новый Массив;
	ТЗIDLS = Новый ТаблицаЗначений;
	ТЗIDLS.Колонки.Добавить("ID_LS");
	ТЗIDLS.Колонки.Добавить("СчётНаОплатуСсылка");
	ТЗIDLS.Колонки.Добавить("ДатаВремяИзменения");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МинДатаВремяИзменения>ВыборкаДетальныеЗаписи.ДатаВремяИзменения Тогда
			МинДатаВремяИзменения = ВыборкаДетальныеЗаписи.ДатаВремяИзменения;
		КонецЕсли;
		
		МассивIDLS.Добавить(ВыборкаДетальныеЗаписи.ID_LS);
		
		СтрокаТЗIDLS = ТЗIDLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗIDLS, ВыборкаДетальныеЗаписи);
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.ID_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Счет.ID_Договор.ID КАК ID_Договор,
		|	dbo_Счет.ID_Валюта КАК ID_Валюта,
		|	dbo_Счет.ID_Валюта.KOD КАК KOD_Валюта,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаВВалСчета,
		|	dbo_Счет.СуммаВБазовойВалюте КАК СуммаВБазовойВалюте,
		|	dbo_Счет.СуммаКОплате КАК СуммаКОплате,
		|	dbo_Счет.Комментарий КАК Комментарий,
		|	dbo_Контрагент.ИНН КАК ИННКонтрагента,
		|	dbo_Персона.ID КАК IDОтветственный,
		|	dbo_Счет.CurEditTime КАК CurEditTime,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	dbo_Счет.ЕстьОригиналАкта КАК ЕстьОригиналАкта,
		|	dbo_Счет.ЕстьОригиналСчетФактура КАК ЕстьОригиналСчетФактура,
		|	ЕСТЬNULL(dbo_Счет.НомерАкта, dbo_Счет.НомерСчета) КАК НомерАкта,
		|	ЕСТЬNULL(dbo_Счет.ДатаАкта, """") КАК ДатаАкта,
		|	dbo_Счет.НомерСчетФактуры КАК НомерСчетФактуры,
		|	dbo_Счет.ДатаСчетФактуры КАК ДатаСчетФактуры,
		|	dbo_Счет.Дата_действия КАК ОплатитьДо,
		|	ЕСТЬNULL(НомерДТ.Значение_char, """") КАК ТД,
		|	ЕСТЬNULL(НомерПорученияЭкспедора.Значение_char, """") КАК НомерПорученияЭкспедитору,
		|	ЕСТЬNULL(ПрочиеПримечания.Значение_char, """") КАК КомментарийПоСчету,
		|	dbo_Счет.НомерУКонтрагента КАК НомерЗаказаУКлиента,
		|	dbo_Счет.СворачиватьБезЦеныБезВалютыУслуги КАК СворачиватьБезЦеныБезВалютыУслуги,
		|	dbo_Счет.ТипНоменклатурыДляСворачивания КАК ТипНоменклатурыДляСворачивания,
		|	dbo_Счет.bit_ВыставлятьОднойУслугой КАК ВыставлятьОднойУслугой,
		|	dbo_Счет.ID_УслугаСтрока КАК ID_УслугаСтрока,
		|	dbo_Счет.Заметки КАК Заметки
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Признак_Выгрузки_1С КАК dbo_Признак_Выгрузки_1С
		|		ПО dbo_Счет.Признак1С = dbo_Признак_Выгрузки_1С.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Счет.ID_Контрагент.ID = dbo_Контрагент.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|		ПО dbo_Счет.ID_Менеджер.ID = dbo_Персона.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_UserFieldValue КАК НомерДТ
		|		ПО dbo_Счет.ID = НомерДТ.ID_Записи
		|			И (НомерДТ.ID_UserField = 140)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_UserFieldValue КАК НомерПорученияЭкспедора
		|		ПО dbo_Счет.ID = НомерПорученияЭкспедора.ID_Записи
		|			И (НомерПорученияЭкспедора.ID_UserField = 143)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_UserFieldValue КАК ПрочиеПримечания
		|		ПО dbo_Счет.ID = ПрочиеПримечания.ID_Записи
		|			И (ПрочиеПримечания.ID_UserField = 145)
		|ГДЕ
		|	1 = 1
		|	И dbo_Счет.ID_Направление = 1
		|	И dbo_Счет.ID В(&МассивIDФл)
		|	И (НЕ dbo_Счет.ID В (&МассивIDLS)
		|			ИЛИ dbo_Счет.ID В (&МассивIDLS)
		|				И dbo_Признак_Выгрузки_1С.ID <> 1
		|			ИЛИ dbo_Счет.ID В (&МассивIDLSПринудительно))";
	
	Запрос.УстановитьПараметр("МассивIDLSПринудительно", МассивПринудительно);
	Запрос.УстановитьПараметр("МассивIDLS", МассивIDLS);
	Запрос.УстановитьПараметр("МинДатаИзменения", МинДатаВремяИзменения);
	Запрос.УстановитьПараметр("МассивIDФл", МассивIDФл);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТЗ = ТЗIDLS.Найти(ВыборкаДетальныеЗаписи.ID, "ID_LS");
		Если СтрокаТЗ<>Неопределено Тогда
			СчётНаОплатуСсылка = СтрокаТЗ.СчётНаОплатуСсылка;
		Иначе 
			СчётНаОплатуСсылка = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураСчета = Новый Структура("ID, ID_Контрагент, ID_Договор, KOD_Валюта, НомерСчета, Дата_Выставления, СуммаВВалСчета, СуммаВБазовойВалюте, СуммаКОплате, 
										|Комментарий, ИННКонтрагента, IDОтветственный, РеференсыЗаказов, НомерАкта, ДатаАкта, ТД, НомерПорученияЭкспедитору, КомментарийПоСчету, НомерЗаказаУКлиента, ЕстьОригиналАкта, 
										|СворачиватьБезЦеныБезВалютыУслуги, ТипНоменклатурыДляСворачивания, ВыставлятьОднойУслугой, ID_УслугаСтрока, Заметки");
		
		ЗаполнитьЗначенияСвойств(СтруктураСчета, ВыборкаДетальныеЗаписи);
		
		Если Не ПроверкаОпцийПечати(СтруктураСчета) Тогда
			Возврат; 
		КонецЕсли;
		
		СчетСсылка = СоздатьСчет(СтруктураСчета, СчётНаОплатуСсылка);
		
		Если СчетСсылка<>Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
			
			СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчетСсылка, ВыборкаДетальныеЗаписи.ОплатитьДо);
			
			Если СчетСсылка<>Неопределено И СчетСсылка<>Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
				ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СчетСсылка, ВыборкаДетальныеЗаписи.ID, ВыборкаДетальныеЗаписи.CurEditTime);
				ЗаписатьПризнак1с(ВыборкаДетальныеЗаписи.ID);
				
				//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерАкта) И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаАкта) Тогда
				//	СоздатьАктНаОснованииСчёта(СчетСсылка, ВыборкаДетальныеЗаписи.НомерАкта, ВыборкаДетальныеЗаписи.ДатаАкта, СтруктураСчета);	
				//КонецЕсли;			
			КонецЕсли;
			
			ПоместитьСчетКлиентуВТаблицу(ВыборкаДетальныеЗаписи.ID, СчетСсылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаОпцийПечати(СтруктураСчета)
	
	ЗначениеВозврат = Истина;
	Если СтруктураСчета.ВыставлятьОднойУслугой  Тогда
		Если Не ЗначениеЗаполнено(СтруктураСчета.ID_УслугаСтрока) Тогда
			ТекстСообщения = "В счете "+СтруктураСчета.НомерСчета+" выбрана опция печати 'Выводить на печать одной услугой с общей суммой', но не выбрана услуга. Счет не может быть загружен.";
			ЗначениеВозврат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеВозврат Тогда
		Сообщить = Новый СообщениеПользователю; 
		Сообщить.Текст = ТекстСообщения;
		Сообщить.Сообщить();
	КонецЕсли;
	
	Возврат ЗначениеВозврат;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаСчетов(Команда)
	ЗагрузкаСчетовНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДокументБезНДС(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.СтавкаНДС <> &СтавкаНДС
		|	И РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Ссылка,
		|	РеализацияТоваровУслугУслуги.НомерСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.СтавкаНДС <> &СтавкаНДС
		|	И РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка,
		|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС <> &СтавкаНДС
		|	И РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверитьДокументБезНДС()

&НаСервереБезКонтекста
Процедура СоздатьАктНаОснованииСчёта(СсылкаСчёт, НомерАкта, ДатаАкта, СтруктураСчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю";
	
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СсылкаСчёт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДокАкт = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе 
		ДокАкт = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	ДокАкт.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ДокАкт.Заполнить(СсылкаСчёт);
	ДокАкт.Номер = НомерАкта;
	ДокАкт.Дата = ДатаАкта;
	
	ТекДата = ТекущаяДата();
	ДокАкт.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерАкта+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
	
	ДокАкт.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	//Если СтруктураСчета.ЕстьОригиналАкта Тогда
	//	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ДокАкт.Ссылка, Перечисления.СтатусыДокументовРеализации.Подписан);
	//КонецЕсли;
	
	Если Не ПроверитьДокументБезНДС(ДокАкт.Ссылка) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокАкт.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчетФактура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Иначе 
			СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент(); 
			СчетФактура.Заполнить(ДокАкт.Ссылка);
		КонецЕсли;
		
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		СчетФактура.Номер = НомерАкта;
		СчетФактура.Дата = ДатаАкта;
				
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
	
	КонецЕсли;
	
КонецПроцедуры // СоздатьАктНаОснованииСчёта()

&НаСервере
Процедура ЗаполнитьДанныеСчетовLSНаСервере()
	
	ТаблицаСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.ID_Контрагент КАК КонтрагентLS,
		|	dbo_Счет.ID_Договор КАК ДоговорLS,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	ВЫБОР
		|		КОГДА dbo_Счет.Признак1С.ID = 0
		|			ТОГДА ""Новый""
		|		КОГДА dbo_Счет.Признак1С.ID = 1
		|			ТОГДА ""Передан в 1с""
		|		ИНАЧЕ ""Обновлён""
		|	КОНЕЦ КАК Признак1С,
		|	ВЫБОР
		|		КОГДА dbo_Счет.ЕстьОригиналАкта
		|			ТОГДА ""Есть Акт""
		|		ИНАЧЕ ""Нет Акта""
		|	КОНЕЦ КАК НаличиеАкта,
		|	dbo_Счет.НомерАкта КАК НомерАкта,
		|	dbo_Счет.ДатаАкта КАК ДатаАкта,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаСчета,
		|	dbo_Счет.ID_Валюта.KOD КАК ID_ВалютаKOD,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.ID_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Счет.ID_Договор.ID КАК ID_Договор,
		|	dbo_Статус_исполнения_документа.Наименование КАК СтатусСчёта,
		|	dbo_Счет.ДатаОкончанияУслуг КАК ДатаОкончанияУслуг
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Статус_исполнения_документа КАК dbo_Статус_исполнения_документа
		|		ПО dbo_Счет.ID_Статус = dbo_Статус_исполнения_документа.Ссылка
		|ГДЕ
		|	dbo_Счет.ID_Направление = 1
		|	И dbo_Счет.Дата_Выставления МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	"+?(ЗначениеЗаполнено(КлиентLS), "И dbo_Счет.ID_Контрагент = &КлиентLS", "")+"
		|   "+?(ПризнакСчета=5, "", "И dbo_Счет.Признак1С.ID="+ПризнакСчета)+"
		|УПОРЯДОЧИТЬ ПО
		|	Дата_Выставления";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПериодВыбораСчетов.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПериодВыбораСчетов.ДатаОкончания);
	Запрос.УстановитьПараметр("КлиентLS", КлиентLS);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаСчетов = ТаблицаСчетов.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаСчетов, ВыборкаДетальныеЗаписи);
		
		СтрокаТаблицаСчетов.НаличиеАкта = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерАкта) И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаАкта), "Есть Акт", "Нет Акта");
		
		ВалютаСчёта = ПолучитьВалюта(ВыборкаДетальныеЗаписи.ID_ВалютаKOD);
		
		СтрокаТаблицаСчетов.СчётНаОплату = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Документ.СчетНаОплатуПокупателю");
		Если ЗначениеЗаполнено(СтрокаТаблицаСчетов.СчётНаОплату) Тогда
		    ПолучитьАктСчётФактура(СтрокаТаблицаСчетов.СчётНаОплату, СтрокаТаблицаСчетов);
			СтрокаТаблицаСчетов.СуммаСчет1с = СтрокаТаблицаСчетов.СчётНаОплату.СуммаДокумента;
		
		КонецЕсли;
		СтрокаТаблицаСчетов.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаСчетов.СчётLS = ВыборкаДетальныеЗаписи.НомерСчета;
		СтрокаТаблицаСчетов.ДатаСчёта = ВыборкаДетальныеЗаписи.Дата_Выставления;
		СтрокаТаблицаСчетов.КонтрагентLS = ВыборкаДетальныеЗаписи.КонтрагентLS;
		СтрокаТаблицаСчетов.ДоговорLS = ВыборкаДетальныеЗаписи.ДоговорLS;
		СтрокаТаблицаСчетов.ID_Контрагент = ВыборкаДетальныеЗаписи.ID_Контрагент;
		СтрокаТаблицаСчетов.ID_Договор = ВыборкаДетальныеЗаписи.ID_Договор;
		СтрокаТаблицаСчетов.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Контрагент, "Справочник.Контрагенты");
		СтрокаТаблицаСчетов.ДатаОкончанияУслуг = ВыборкаДетальныеЗаписи.ДатаОкончанияУслуг;
		//СтрокаТаблицаСчетов.Договор = ОбщийМодульItsLabs.ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов", ВалютаСчёта);
		СтрокаТаблицаСчетов.Договор = ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов", ВалютаСчёта);
		СтрокаТаблицаСчетов.СуммаСчета = ВыборкаДетальныеЗаписи.СуммаСчета;
		СтрокаТаблицаСчетов.ПризнакСчёта = ВыборкаДетальныеЗаписи.Признак1С;
		СтрокаТаблицаСчетов.РеференсыЗаказов = ВыборкаДетальныеЗаписи.РеференсыЗаказов;
		СтрокаТаблицаСчетов.ВалютаСчёта = ВалютаСчёта
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСчетовLS(Команда)
	ЗаполнитьДанныеСчетовLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID_Контрагент;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID_Договор;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммаСчет1с(СчётНаОплату)

	Возврат СчётНаОплату.СуммаДокумента;	

КонецФункции // ПолучитьСуммаСчет1с()

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ТаблицаСчетов.ТекущиеДанные.СчётНаОплату) Тогда
	
		Элементы.ТаблицаСчетов.ТекущиеДанные.СуммаСчет1с = ПолучитьСуммаСчет1с(Элементы.ТаблицаСчетов.ТекущиеДанные.СчётНаОплату);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID_Контрагент;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID_Договор;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.СчётНаОплату;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.СчётНаОплату;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСчетовПоставщиковLSНаСервере()
	
	ТаблицаСчетовОтПоставщиков.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.ID_Контрагент КАК КонтрагентLS,
		|	dbo_Счет.ID_Договор КАК ДоговорLS,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	dbo_Счет.ID_Контрагент.ПолноеИмя КАК ID_КонтрагентПолноеИмя,
		|	ВЫБОР
		|		КОГДА dbo_Счет.Признак1С.ID = 0
		|			ТОГДА ""Новый""
		|		КОГДА dbo_Счет.Признак1С.ID = 1
		|			ТОГДА ""Передан в 1с""
		|		ИНАЧЕ ""Обновлён""
		|	КОНЕЦ КАК Признак1С,
		|	ВЫБОР
		|		КОГДА dbo_Счет.ЕстьОригиналАкта
		|			ТОГДА ""Есть оригинал акта""
		|		КОГДА dbo_Счет.ЕстьАкт
		|				И НЕ dbo_Счет.ЕстьОригиналАкта
		|			ТОГДА ""Есть копия акта""
		|		ИНАЧЕ ""Нет Акта""
		|	КОНЕЦ КАК НаличиеАкта,
		|	dbo_Счет.НомерАкта КАК НомерАкта,
		|	dbo_Счет.ДатаАкта КАК ДатаАкта,
		|	dbo_Счет.НомерУКонтрагента КАК НомерУКонтрагента,
		|	dbo_Счет.ID_Валюта.KOD КАК ID_ВалютаKOD,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаВВалСчета,
		|	dbo_Счет.ID_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Счет.ID_Договор.ID КАК ID_Договор
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|ГДЕ
		|	dbo_Счет.ID_Направление = 0
		|	И dbo_Счет.Дата_Выставления МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	"+?(ЗначениеЗаполнено(ПоставщикLS), "И dbo_Счет.ID_Контрагент = &ПоставщикLS", "")+"
		|   "+?(ПризнакСчетаПоставщика=5, "", "И dbo_Счет.Признак1С.ID="+ПризнакСчетаПоставщика)+"
		|УПОРЯДОЧИТЬ ПО
		|	dbo_Счет.Дата_Выставления";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПериодВыбораСчетов.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПериодВыбораСчетов.ДатаОкончания);
	Запрос.УстановитьПараметр("ПоставщикLS", ПоставщикLS);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаСчетов = ТаблицаСчетовОтПоставщиков.Добавить();
		
		ВалютаСчёта = ПолучитьВалюта(ВыборкаДетальныеЗаписи.ID_ВалютаKOD);
		
		СтрокаТаблицаСчетов.СчётОтПоставщика = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Документ.СчетНаОплатуПоставщика");
		СтрокаТаблицаСчетов.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаСчетов.СчётLS = ВыборкаДетальныеЗаписи.НомерСчета;
		СтрокаТаблицаСчетов.ДатаLS = ВыборкаДетальныеЗаписи.Дата_Выставления;
		СтрокаТаблицаСчетов.КонтрагентLS = ВыборкаДетальныеЗаписи.КонтрагентLS;
		СтрокаТаблицаСчетов.ДоговорLS = ВыборкаДетальныеЗаписи.ДоговорLS;
		СтрокаТаблицаСчетов.ID_Контрагент = ВыборкаДетальныеЗаписи.ID_Контрагент;
		СтрокаТаблицаСчетов.ID_Договор = ВыборкаДетальныеЗаписи.ID_Договор;
		СтрокаТаблицаСчетов.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Контрагент, "Справочник.Контрагенты");
		//СтрокаТаблицаСчетов.Договор = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов");
		//СтрокаТаблицаСчетов.Договор = ОбщийМодульItsLabs.ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов", ВалютаСчёта);
		СтрокаТаблицаСчетов.Договор = ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов", ВалютаСчёта);
		СтрокаТаблицаСчетов.РеференсыЗаказов = ВыборкаДетальныеЗаписи.РеференсыЗаказов;
		СтрокаТаблицаСчетов.ПризнакСчёта = ВыборкаДетальныеЗаписи.Признак1С;
		СтрокаТаблицаСчетов.НаличиеАкта = ВыборкаДетальныеЗаписи.НаличиеАкта;
		СтрокаТаблицаСчетов.НомерАкта = ВыборкаДетальныеЗаписи.НомерАкта;
		СтрокаТаблицаСчетов.ДатаАкта = ВыборкаДетальныеЗаписи.ДатаАкта;
		СтрокаТаблицаСчетов.НомерУКонтрагента = ВыборкаДетальныеЗаписи.НомерУКонтрагента;
		СтрокаТаблицаСчетов.СуммаСчета = ВыборкаДетальныеЗаписи.СуммаВВалСчета;
		СтрокаТаблицаСчетов.ВалютаСчёта = ВалютаСчёта;
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьАктСчётФактура(СчётНаОплату, СтрокаТаблицаСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Акт,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СчётФактура
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетПокупателю
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО (РеализацияТоваровУслуг.СчетНаОплатуПокупателю = СчетПокупателю.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
		|ГДЕ
		|	СчетПокупателю.Ссылка = &СчетНаОплату";
	
	Запрос.УстановитьПараметр("СчетНаОплату", СчётНаОплату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаСчетов, ВыборкаДетальныеЗаписи);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСчетовПоставщиковLS(Команда)
	ЗаполнитьДанныеСчетовПоставщиковLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПризнакВозмещаемый(ID_Счет)
	
	Возмещаемый = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(dbo_Контейнер_Услуги_Счета.Возмещаемый, 0) КАК ЧИСЛО)) КАК Возмещаемый,
		|	КОЛИЧЕСТВО(*) КАК КолСтрок
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контейнер_Услуги_Счета КАК dbo_Контейнер_Услуги_Счета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ПО dbo_Контейнер_Услуги_Счета.ID_Счет = dbo_Счет.Ссылка
		|			И (dbo_Счет.ID = &ID_Счет)";
	
	Запрос.УстановитьПараметр("ID_Счет", ID_Счет);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.Возмещаемый=ВыборкаДетальныеЗаписи.КолСтрок Тогда
			Возмещаемый = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Возмещаемый;
	
КонецФункции

&НаСервере
Функция СоздатьСчетПоставщика(СтруктураСчета, СчётНаОплатуСсылка)

	ТекДата = ТекущаяДата();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПоставщика");
		Блокировка.Заблокировать();
		
		ПодразделениеОрганизации = ПолучитьПодразделение();
		ДатаСчета = СтруктураСчета.Дата_Выставления;
		
		Если СчётНаОплатуСсылка=Документы.СчетНаОплатуПоставщика.ПустаяСсылка() Тогда
			СчётНаОплатуОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		Иначе 	
			СчётНаОплатуОбъект = СчётНаОплатуСсылка.ПолучитьОбъект();
			СчётНаОплатуОбъект.Товары.Очистить();
		КонецЕсли;
		
		СчётНаОплатуОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		
		//СчётНаОплатуОбъект.ОбменДанными.Загрузка = Истина;
		СчётНаОплатуОбъект.Номер = СтруктураСчета.НомерСчета;
		СчётНаОплатуОбъект.Дата = СтруктураСчета.Дата_Выставления;
		СчётНаОплатуОбъект.ВалютаДокумента = ПолучитьВалюта(СтруктураСчета.KOD_Валюта);
		СчётНаОплатуОбъект.Организация = ПолучитьОрганизацию();
		
		СчётНаОплатуОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СчётНаОплатуОбъект.Контрагент = ПолучитьОбъект(СтруктураСчета.ID_Контрагент, "Справочник.Контрагенты");
		
		Если ПолучитьПризнакВозмещаемый(СтруктураСчета.ID) Тогда
			СписокВидовДоговоров = Новый Массив;
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
			
			УстановитьДоговорСКлиентом(СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.Организация, СчётНаОплатуОбъект.ПодразделениеОрганизации, 
			СписокВидовДоговоров, СчётНаОплатуОбъект.ВалютаДокумента);
		Иначе
			//ДоговорКонтрагента = ПолучитьОбъект(СтруктураСчета.ID_Договор, "Справочник.ДоговорыКонтрагентов");
			//ДоговорКонтрагента = ОбщийМодульItsLabs.ПолучитьОбъектПоID(СтруктураСчета.ID_Договор, "Справочник.ДоговорыКонтрагентов", СчётНаОплатуОбъект.ВалютаДокумента);
			ДоговорКонтрагента = ПолучитьОбъектПоID(СтруктураСчета.ID_Договор, "Справочник.ДоговорыКонтрагентов", СчётНаОплатуОбъект.ВалютаДокумента);
		КонецЕсли;
		
		Если ДоговорКонтрагента=Неопределено  Тогда
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.Организация, 
			ПолучитьМассивВидовДоговоровПоставщика());
		Иначе
			СчётНаОплатуОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
		СчётНаОплатуОбъект.НомерВходящегоДокумента = СтруктураСчета.НомерУКонтрагента;
		СчётНаОплатуОбъект.ДатаВходящегоДокумента = СтруктураСчета.Дата_Выставления;
		
		СчётНаОплатуОбъект.Комментарий = СтруктураСчета.Комментарий;
		СчётНаОплатуОбъект.Ответственный = ПолучитьОбъект(СтруктураСчета.IDОтветственный, "Справочник.Пользователи");
		СчётНаОплатуОбъект.СуммаВключаетНДС = Истина;
		
		СчётНаОплатуОбъект.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерСчета+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
		
		ТЗСтрокиСчёта = ПолучитьСтрокиСчета(СтруктураСчета.ID);
		
		Для каждого СтрокаТЗСтрокиСчёта Из ТЗСтрокиСчёта Цикл
			
			СтрокаТовары = СчётНаОплатуОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТЗСтрокиСчёта);
			
			СтрокаТовары.ПаспортНаПеревозкуПоСтроке = ПолучитьПаспортНаПеревозку(СтрокаТЗСтрокиСчёта.НомерРеференсаЗаказа, Неопределено);

		КонецЦикла;
		
		СчётНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Если ЗначениеЗаполнено(СтруктураСчета.ОплатитьДо) Тогда
			СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчётНаОплатуОбъект.Ссылка, СтруктураСчета.ОплатитьДо);
		Иначе
			СрокиОплатыДокументов.УдалитьСрокОплаты(СчётНаОплатуОбъект.Ссылка);
		КонецЕсли;
		
		СчётНаОплатуСсылка = СчётНаОплатуОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось загрузить счет."+ ОписаниеОшибки();
		Сообщение.Сообщить();
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат СчётНаОплатуСсылка;
	
КонецФункции // СоздатьСчет()

&НаСервере
Процедура ПоместитьСчетПоствщикаВТаблицу(ID, СчётСсылка)
	
	ПараметрыОтбора = Новый Структура("ID", ID);
	СтрокиТаблицаСчетПоставкщика = ТаблицаСчетовОтПоставщиков.НайтиСтроки(ПараметрыОтбора);
	Для каждого СтрокаТаблицаСчетПоставкщика Из СтрокиТаблицаСчетПоставкщика Цикл
		
		СтрокаТаблицаСчетПоставкщика.СчётОтПоставщика = СчётСсылка;	
	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСчетовПоставщиковНаСервере()
	
	МассивПринудительно = Новый Массив;
	МассивIDФл = ПолучитьМассивIDФл("ТаблицаСчетовОтПоставщиков", МассивПринудительно);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаНаОплатуLogiSmart.ID_LS КАК ID_LS,
		|	СчетаНаОплатуLogiSmart.Объект КАК СчётНаОплатуСсылка,
		|	СчетаНаОплатуLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК СчетаНаОплатуLogiSmart
		|ГДЕ
		|	СчетаНаОплатуLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПоставщика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МинДатаВремяИзменения = КонецДня(ТекущаяДата());
	МассивIDLS = Новый Массив;
	ТЗIDLS = Новый ТаблицаЗначений;
	ТЗIDLS.Колонки.Добавить("ID_LS");
	ТЗIDLS.Колонки.Добавить("СчётНаОплатуСсылка");
	ТЗIDLS.Колонки.Добавить("ДатаВремяИзменения");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МинДатаВремяИзменения>ВыборкаДетальныеЗаписи.ДатаВремяИзменения Тогда
			МинДатаВремяИзменения = ВыборкаДетальныеЗаписи.ДатаВремяИзменения;
		КонецЕсли;
		
		МассивIDLS.Добавить(ВыборкаДетальныеЗаписи.ID_LS);
		
		СтрокаТЗIDLS = ТЗIDLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗIDLS, ВыборкаДетальныеЗаписи);
	
	КонецЦикла;
	
	//Соединение  = Новый COMОбъект("ADODB.Connection");
	//Команда     = Новый COMОбъект("ADODB.Command");
	//
	//Соединение.ConnectionString = ПолучитьСтрокуСоединения();
	//Соединение.ConnectionTimeout = 30;
	//Соединение.CommandTimeout = 600;
	//
	////Открытие соединение
	//Попытка
	//	Соединение.Open();
	//	Команда.ActiveConnection  = Соединение;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.ID_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Счет.ID_Договор.ID КАК ID_Договор,
		|	dbo_Счет.ID_Валюта КАК ID_Валюта,
		|	dbo_Счет.ID_Валюта.KOD КАК KOD_Валюта,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаВВалСчета,
		|	dbo_Счет.СуммаВБазовойВалюте КАК СуммаВБазовойВалюте,
		|	dbo_Счет.СуммаКОплате КАК СуммаКОплате,
		|	dbo_Счет.Комментарий КАК Комментарий,
		|	dbo_Контрагент.ИНН КАК ИННКонтрагента,
		|	dbo_Персона.ID КАК IDОтветственный,
		|	dbo_Счет.CurEditTime КАК CurEditTime,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	dbo_Счет.ЕстьАкт КАК ЕстьАкт,
		|	dbo_Счет.ЕстьОригиналАкта КАК ЕстьОригиналАкта,
		|	dbo_Счет.ЕстьОригиналСчетФактура КАК ЕстьОригиналСчетФактура,
		|	dbo_Счет.НомерАкта КАК НомерАкта,
		|	dbo_Счет.ДатаАкта КАК ДатаАкта,
		|	dbo_Счет.НомерСчетФактуры КАК НомерСчетФактуры,
		|	dbo_Счет.ДатаСчетФактуры КАК ДатаСчетФактуры,
		|	dbo_Счет.НомерУКонтрагента КАК НомерУКонтрагента,
		|	dbo_Счет.Дата_действия КАК ОплатитьДо
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Признак_Выгрузки_1С КАК dbo_Признак_Выгрузки_1С
		|		ПО dbo_Счет.Признак1С = dbo_Признак_Выгрузки_1С.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Счет.ID_Контрагент.ID = dbo_Контрагент.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|		ПО dbo_Счет.ID_Менеджер.ID = dbo_Персона.ID
		|ГДЕ
		|	1 = 1
		|	И dbo_Счет.ID_Направление = 0
		|	И dbo_Счет.ID В(&МассивIDФл)
		|	И (НЕ dbo_Счет.ID В (&МассивIDLS)
		|			ИЛИ dbo_Счет.ID В (&МассивIDLS)
		|				И dbo_Признак_Выгрузки_1С.ID <> 1
		|			ИЛИ dbo_Счет.ID В (&МассивIDПринудительно))";
	
	Запрос.УстановитьПараметр("МассивIDПринудительно", МассивПринудительно);
	Запрос.УстановитьПараметр("МассивIDLS", МассивIDLS);
	Запрос.УстановитьПараметр("МинДатаИзменения", МинДатаВремяИзменения);
	Запрос.УстановитьПараметр("МассивIDФл", МассивIDФл);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТЗ = ТЗIDLS.Найти(ВыборкаДетальныеЗаписи.ID, "ID_LS");
		Если СтрокаТЗ<>Неопределено Тогда
			СчётНаОплатуСсылка = СтрокаТЗ.СчётНаОплатуСсылка;                                     
		Иначе 
			СчётНаОплатуСсылка = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураСчета = Новый Структура("ID, ID_Контрагент, ID_Договор, KOD_Валюта, НомерСчета, Дата_Выставления, ОплатитьДо, СуммаВВалСчета, СуммаВБазовойВалюте, СуммаКОплате, Комментарий, ИННКонтрагента, IDОтветственный, РеференсыЗаказов, НомерУКонтрагента, ЕстьОригиналАкта, ЕстьОригиналСчетФактура, НомерАкта, ДатаАкта, НомерСчетФактуры, ДатаСчетФактуры");
		
		ЗаполнитьЗначенияСвойств(СтруктураСчета, ВыборкаДетальныеЗаписи);
		
		СчетСсылка = СоздатьСчетПоставщика(СтруктураСчета, СчётНаОплатуСсылка);
		
		Если СчетСсылка<>Неопределено И СчетСсылка<>Документы.СчетНаОплатуПоставщика.ПустаяСсылка() Тогда
			ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СчетСсылка, ВыборкаДетальныеЗаписи.ID, ВыборкаДетальныеЗаписи.CurEditTime);
		    ЗаписатьПризнак1с(ВыборкаДетальныеЗаписи.ID);
			
			
			//Если ВыборкаДетальныеЗаписи.ЕстьОригиналАкта Или ВыборкаДетальныеЗаписи.ЕстьАкт Тогда
			//	СоздатьПоступлениеОтПоставщикаОснованииСчёта(СчетСсылка, ВыборкаДетальныеЗаписи.НомерАкта, ВыборкаДетальныеЗаписи.ДатаАкта, СтруктураСчета, ВыборкаДетальныеЗаписи.ЕстьОригиналАкта);	
			//КонецЕсли;
			
			ПоместитьСчетПоствщикаВТаблицу(ВыборкаДетальныеЗаписи.ID, СчетСсылка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьПоступлениеОтПоставщикаОснованииСчёта(СчетСсылка, НомерАкта, ДатаАкта, СтруктураСчета, Оригинал)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика = &СчетНаОплатуПоставщика";
	
	Запрос.УстановитьПараметр("СчетНаОплатуПоставщика", СчетСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДокПоступление = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе 
		ДокПоступление = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();  
	КонецЕсли;
	
	ДокПоступление.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ДокПоступление.Заполнить(СчетСсылка);
	ДокПоступление.Дата = ДатаАкта;
	
	ДокПоступление.НомерВходящегоДокумента = НомерАкта;
	ДокПоступление.ДатаВходящегоДокумента = ДатаАкта;
	
	ТекДата = ТекущаяДата();
	ДокПоступление.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерАкта+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
	
	ДокПоступление.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если Оригинал Тогда
		РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ДокПоступление.Ссылка, Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);	
	КонецЕсли;
	
	Если СтруктураСчета.ЕстьОригиналСчетФактура Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокПоступление.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчетФактура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Иначе 
			СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
		КонецЕсли;
		
		СчетФактура.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		СчетФактура.Заполнить(ДокПоступление.Ссылка);
		СчетФактура.НомерВходящегоДокумента = СтруктураСчета.НомерСчетФактуры;
		СчетФактура.Дата = СтруктураСчета.ДатаСчетФактуры;
		СчетФактура.ДатаВходящегоДокумента = СтруктураСчета.ДатаСчетФактуры;
		
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
	
	КонецЕсли;

КонецПроцедуры // СоздатьПоступлениеОтПоставщикаОснованииСчёта()

&НаКлиенте
Процедура ЗагрузкаСчетовПоставщиков(Команда)
	ЗагрузкаСчетовПоставщиковНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковСчётНаОплатуОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.СчётОтПоставщика;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковСчётНаОплатуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковСчётНаОплатуИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.СчётОтПоставщика;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлТЗСчетаПоставщики(Команда)
	СнятьУстановитьФл(Истина, "ТаблицаСчетовОтПоставщиков");
КонецПроцедуры

#КонецОбласти  

&НаСервере
Процедура СнятьУстановитьФл(ЗначениеФл, ИмяТаблицы)
	
	ТЗСчетов = РеквизитФормыВЗначение(ИмяТаблицы, Тип("ТаблицаЗначений")); 
	ТЗСчетов.ЗаполнитьЗначения(ЗначениеФл, "Фл");
	ЗначениеВРеквизитФормы(ТЗСчетов, ИмяТаблицы);
	
КонецПроцедуры // СнятьФл()

&НаКлиенте
Процедура СнятьФл(Команда)
	СнятьУстановитьФл(Ложь, "ТаблицаСчетов");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФл(Команда)
	СнятьУстановитьФл(Истина, "ТаблицаСчетов");
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлТЗСчетаПоставщики(Команда)
	СнятьУстановитьФл(Ложь, "ТаблицаСчетовОтПоставщиков");
КонецПроцедуры

&НаСервере
Функция ПолучитьДокументПлатежа(Счет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату = &СчетНаОплату
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
		|ГДЕ
		|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетНаОплату = &СчетНаОплату";
	
	Запрос.УстановитьПараметр("СчетНаОплату", Счет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьСчетLD(НомерСчета, IDСчетLS)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.ID КАК ID
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|ГДЕ
		|	dbo_Счет.НомерСчета = &НомерСчета";
	
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		IDСчетLS = ВыборкаДетальныеЗаписи.ID;
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура НайтиУдаленныеСчетаНаСервере()
	
	ТаблицаУдаленныхСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗСчетLS = РезультатЗапроса.Выгрузить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗСчетLS.ID КАК ID,
		|	ТЗСчетLS.РеференсыЗаказов КАК РеференсыЗаказов
		|ПОМЕСТИТЬ СчетаLS
		|ИЗ
		|	&ТЗСчетLS КАК ТЗСчетLS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыLogiSmart.Объект КАК Счет,
		|	ОбъектыLogiSmart.ID_LS КАК ID_LS,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.Контрагент ЕСТЬ NULL
		|			ТОГДА СчетНаОплатуПоставщика.Контрагент
		|		ИНАЧЕ СчетНаОплатуПокупателю.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.ВалютаДокумента ЕСТЬ NULL
		|			ТОГДА СчетНаОплатуПоставщика.ВалютаДокумента
		|		ИНАЧЕ СчетНаОплатуПокупателю.ВалютаДокумента
		|	КОНЕЦ КАК СуммаСчета,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.СуммаДокумента ЕСТЬ NULL
		|			ТОГДА СчетНаОплатуПоставщика.СуммаДокумента
		|		ИНАЧЕ СчетНаОплатуПокупателю.СуммаДокумента
		|	КОНЕЦ КАК Валюта,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателю.Номер ЕСТЬ NULL
		|			ТОГДА СчетНаОплатуПоставщика.Номер
		|		ИНАЧЕ СчетНаОплатуПокупателю.Номер
		|	КОНЕЦ КАК НомерСчета
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаLS КАК СчетаLS
		|		ПО ОбъектыLogiSmart.ID_LS = СчетаLS.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ПО ОбъектыLogiSmart.Объект = СчетНаОплатуПокупателю.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|		ПО ОбъектыLogiSmart.Объект = СчетНаОплатуПоставщика.Ссылка
		|ГДЕ
		|	(ОбъектыLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПокупателю
		|			ИЛИ ОбъектыLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПоставщика)
		|	И СчетаLS.ID ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТЗСчетLS", ТЗСчетLS);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицаУдаленныхСчетов = ТаблицаУдаленныхСчетов.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаУдаленныхСчетов, ВыборкаДетальныеЗаписи);
		СтрокаТаблицаУдаленныхСчетов.Оплата = ПолучитьДокументПлатежа(ВыборкаДетальныеЗаписи.Счет);
		IDСчетLS = 0;
		СтрокаТаблицаУдаленныхСчетов.СчетLS = ПолучитьСчетLD(СокрЛП(ВыборкаДетальныеЗаписи.Счет.Номер), IDСчетLS);
		СтрокаТаблицаУдаленныхСчетов.IDСчетLS = IDСчетLS;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиУдаленныеСчета(Команда)
	НайтиУдаленныеСчетаНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьУдалённыеСчетаНаСервере()
	
	ТЗУдаленныхСчетов = РеквизитФормыВЗначение("ТаблицаУдаленныхСчетов");
	
	//НаборЗаписейРегистрОбъектыLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
	
	
	Массив = ТЗУдаленныхСчетов.ВыгрузитьКолонку("Счет");
		
	ТЗСсылокСчетов = НайтиПоСсылкам(Массив); 
	МассивСчетов = ТЗСсылокСчетов.ВыгрузитьКолонку(0);
	
	ТекстСообщения = "Попытка удаления счетов: ";
	
	Для каждого СтрокаТаблицаУдаленныхСчетов Из ТЗУдаленныхСчетов Цикл
		Если СтрокаТаблицаУдаленныхСчетов.Фл Тогда
			Если МассивСчетов.Найти(СтрокаТаблицаУдаленныхСчетов.Счет)=Неопределено Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "" + СтрокаТаблицаУдаленныхСчетов.Счет + " удален из информационной базы.";
				СчетОбъект = СтрокаТаблицаУдаленныхСчетов.Счет.ПолучитьОбъект();
				СчетОбъект.Удалить()
			Иначе 	
				ТекстСообщения = ТекстСообщения + Символы.ПС + "" + СтрокаТаблицаУдаленныхСчетов.Счет + " не можеть быть удален из информационной базы таr как найдены объекты ссылающиеся.";
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУдалённыеСчета(Команда)
	УдалитьУдалённыеСчетаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлТЗУдСчета(Команда)
	СнятьУстановитьФл(Истина, "ТаблицаУдаленныхСчетов");
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлТЗУдСчета(Команда)
	СнятьУстановитьФл(Ложь, "ТаблицаУдаленныхСчетов");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодчиненные(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаУдаленныхСчетов.ТекущиеДанные;  
	
	ОткрытьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ТекущиеДанные.Счет),
				,
				,
				);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговорыПередУдалением(Элемент, Отказ)
	ID_LS = Элементы.ТаблицаДоговоры.ТекущиеДанные.ID_Договор;
	СсылкаОбъект = Элементы.ТаблицаДоговоры.ТекущиеДанные.ДоговорКонтрагента;
	СсылкаОбъектВалюта = Элементы.ТаблицаДоговоры.ТекущиеДанные.Валюта;
	ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина, СсылкаОбъектВалюта);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Контрагент = Элементы.ТаблицаСчетов.ТекущиеДанные.Контрагент;
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("Контрагент", Контрагент);
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбора", ПараметрыВыбора, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиРегистраНаСервере()
	
	НаборЗаписей = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаУдаленныеСчета Из ТаблицаУдаленныхСчетов Цикл
		
		НаборЗаписей.Отбор.Объект.Установить(СтрокаУдаленныеСчета.Счет);
		НаборЗаписей.Отбор.ID_LS.Установить(СтрокаУдаленныеСчета.ID_LS);
		
		НаборЗаписей.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписиРегистра(Команда)
	УдалитьЗаписиРегистраНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПодразделениёLSНаСервере()
	ТаблицаПодразделения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Подразделения.ID КАК ID,
		|	dbo_Подразделения.Подразделение КАК Подразделение
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Подразделения КАК dbo_Подразделения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаПодразделения = ТаблицаПодразделения.Добавить();
		
		СтрокаТаблицаПодразделения.Подразделение = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.ПодразделенияОрганизаций");
		СтрокаТаблицаПодразделения.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаПодразделения.НаименованиеLS = ВыборкаДетальныеЗаписи.Подразделение;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПодразделениёLS(Команда)
	ЗаполнитьДанныеПодразделениёLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодразделенияПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаПодразделения.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаПодразделения.ТекущиеДанные.Подразделение;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодразделенияПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаПодразделения.ТекущиеДанные.ID;
	ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусЗаказа(Представление)
	
	Если СокрЛП(Представление)="В работе" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.ВРаботе;
	ИначеЕсли СокрЛП(Представление)="Завершен" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.Завершен;
	ИначеЕсли СокрЛП(Представление)="Завершен операционно" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.ЗавершенОперационно;
	ИначеЕсли СокрЛП(Представление)="На проверку" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.НаПроверку;
	ИначеЕсли СокрЛП(Представление)="Отказ" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.Отказ;
	ИначеЕсли СокрЛП(Представление)="Проверен" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.Проверен;
	ИначеЕсли СокрЛП(Представление)="Проект" Тогда
		Возврат Перечисления.СтатусыЗаявокНаПеревозку.Проект;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьИзмененияЗаказ(ID_Заказ, ДатаВремяИзменения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(dbo_Событие.ДатаВремя) КАК ДатаВремя
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Событие КАК dbo_Событие
		|ГДЕ
		|	dbo_Событие.ID_Объекта = &ID_Объекта";
	
	Запрос.УстановитьПараметр("ID_Объекта", ID_Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.ДатаВремя>ДатаВремяИзменения Тогда
			Возврат "Передан в 1с";	
		Иначе
			Возврат "Обновлён";		
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПроверитьИзмененияЗаказ()

&НаСервере
Функция ПолучитьДатаУстановкиЗавершеноОперационно(ID_Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(dbo_Событие.ДатаВремя) КАК ДатаВремя
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Событие КАК dbo_Событие
		|ГДЕ
		|	dbo_Событие.ID_Объекта = &ID_Объекта
		|	И dbo_Событие.Поле = ""Статус""
		|	И dbo_Событие.InfoNew В (""Завершен операционно"", ""На проверку"", ""Проверен"", ""Завершен"")
		|	И dbo_Событие.ID_Тип_Объекта = 4";
	
	Запрос.УстановитьПараметр("ID_Объекта", ID_Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ДатаВремя;
	КонецЕсли;
	
	Возврат Дата('00010101');
	
КонецФункции // ПроверитьИзмененияЗаказ()

&НаСервере
Процедура ЗаполнитьДанныеЗаказовLSНаСервере()
	Перем ДатаВремяИзменения;
	
	ТаблицаПаспортовНаПеревозку.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Запрос_Клиента.Ссылка КАК Ссылка,
		|	dbo_Запрос_Клиента.ID КАК ID,
		|	dbo_Запрос_Клиента.НомерРеференса КАК НомерРеференса,
		|	dbo_Запрос_Клиента.ID_СтатусЗапроса КАК СтатусЗапроса,
		|	dbo_Статус_Запроса.Статус КАК Представление,
		|	dbo_Запрос_Клиента.ID_Заказчик КАК Заказчик,
		|	dbo_Запрос_Клиента.ID_Номинальный_клиент КАК Номинальный_клиент,
		|	dbo_Запрос_Клиента.ID_Плательщик КАК Плательщик,
		|	dbo_Запрос_Клиента.ID_Маршрут КАК Маршрут,
		|	dbo_Запрос_Клиента.ID_НасПункт_Откуда КАК НасПункт_Откуда,
		|	dbo_Запрос_Клиента.ID_НасПункт_Куда КАК НасПункт_Куда,
		|	dbo_Запрос_Клиента.ID_Грузоотправитель КАК Грузоотправитель,
		|	dbo_Запрос_Клиента.ID_Грузополучатель КАК Грузополучатель,
		|	dbo_Запрос_Клиента.ID_Контакт_Грузоотправитель КАК Контакт_Грузоотправитель,
		|	dbo_Запрос_Клиента.ID_Контакт_Грузополучатель КАК Контакт_Грузополучатель,
		|	dbo_Запрос_Клиента.ID_Место_Отправления КАК Место_Отправления,
		|	dbo_Запрос_Клиента.ID_Место_Назначения КАК Место_Назначения,
		|	dbo_Запрос_Клиента.ID_Адрес_Отправления КАК Адрес_Отправления,
		|	dbo_Запрос_Клиента.ID_Адрес_Назначения КАК Адрес_Назначения,
		|	dbo_Запрос_Клиента.ID_СобственнаяФирма КАК СобственнаяФирма,
		|	dbo_Запрос_Клиента.ID_Менеджер КАК Менеджер,
		|	dbo_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Запрос_Клиента.ID_Договор_Экспедирование.ID КАК ID_Договор,
		|	dbo_Персона.ID КАК ID_Менеджер,
		|	dbo_Запрос_Клиента.Дата КАК Дата,
		|	dbo_Подразделения.ID КАК ID_Подразделение,
		|	dbo_Запрос_Клиента.ДатаЗавершенияОперационно КАК ДатаЗавершенияОперационно
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_Клиента КАК dbo_Запрос_Клиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Статус_Запроса КАК dbo_Статус_Запроса
		|		ПО dbo_Запрос_Клиента.ID_СтатусЗапроса = dbo_Статус_Запроса.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Запрос_Клиента.ID_Заказчик = dbo_Контрагент.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Подразделения КАК dbo_Подразделения
		|			ПО dbo_Персона.ID_Подразделение = dbo_Подразделения.Ссылка
		|		ПО dbo_Запрос_Клиента.ID_Менеджер = dbo_Персона.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ПоДатеЗакрытияОперационно
		|				ТОГДА dbo_Запрос_Клиента.ДатаЗавершенияОперационно МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИНАЧЕ dbo_Запрос_Клиента.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		КОНЕЦ
		|	И dbo_Статус_Запроса.Статус <> ""Отказ""";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПериодВыбораЗаказов.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ПериодВыбораЗаказов.ДатаОкончания);
	Запрос.УстановитьПараметр("ПоДатеЗакрытияОперационно", ПоДатеЗавершеноОперационно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПаспортНаПеревозку = ОбщийМодульItsLabs.ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID, "Документ.ЗаявкаНаПеревозку",, ДатаВремяИзменения);
		Если ПаспортНаПеревозку<>Документы.ЗаявкаНаПеревозку.ПустаяСсылка() И ПаспортНаПеревозку<>Неопределено Тогда
			Если ФлНовыеЗаказы Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицаПаспортовНаПеревозку = ТаблицаПаспортовНаПеревозку.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаПаспортовНаПеревозку, ВыборкаДетальныеЗаписи);
		
		//СтрокаТаблицаСчетов.НаличиеАкта = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерАкта) И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаАкта), "Есть Акт", "Нет Акта");
		
		//ВалютаСчёта = ПолучитьВалюта(ВыборкаДетальныеЗаписи.ID_ВалютаKOD);
		ДатаВремяИзменения = Дата('00010101');
		СтрокаТаблицаПаспортовНаПеревозку.ПаспортНаПеревозку = ПаспортНаПеревозку;
		
		Если ПаспортНаПеревозку<>Документы.ЗаявкаНаПеревозку.ПустаяСсылка() И ПаспортНаПеревозку<>Неопределено Тогда
			СтрокаТаблицаПаспортовНаПеревозку.НеЗагружать = ПаспортНаПеревозку.НеЗагружать;	
		КонецЕсли;
		
		Если СтрокаТаблицаПаспортовНаПеревозку.ПаспортНаПеревозку=Документы.ЗаявкаНаПеревозку.ПустаяСсылка() Тогда 
			СтрокаТаблицаПаспортовНаПеревозку.СтатусИзменения = "Новый";
		Иначе
			СтрокаТаблицаПаспортовНаПеревозку.СтатусИзменения = ПроверитьИзмененияЗаказ(ВыборкаДетальныеЗаписи.ID, ДатаВремяИзменения);	
		КонецЕсли;
		СтрокаТаблицаПаспортовНаПеревозку.СтатусИзменения = ПроверитьИзмененияЗаказ(ВыборкаДетальныеЗаписи.ID, ДатаВремяИзменения);
		СтрокаТаблицаПаспортовНаПеревозку.Клиент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Контрагент, "Справочник.Контрагенты");
		СтрокаТаблицаПаспортовНаПеревозку.Подразделение = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Подразделение, "Справочник.ПодразделенияОрганизаций");
		СтрокаТаблицаПаспортовНаПеревозку.Статус = ПолучитьСтатусЗаказа(ВыборкаДетальныеЗаписи.Представление);
		СтрокаТаблицаПаспортовНаПеревозку.Исполнитель = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Менеджер, "Справочник.Пользователи");
		СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершеноОперационно = ВыборкаДетальныеЗаписи.ДатаЗавершенияОперационно;
		СтрокаТаблицаПаспортовНаПеревозку.ДатаУстановкиЗавершеноОперационно = ПолучитьДатаУстановкиЗавершеноОперационно(ВыборкаДетальныеЗаписи.ID);
		Если ЗначениеЗаполнено(СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершеноОперационно) Тогда
			Если РазницаДнейМеждуДатами(СтрокаТаблицаПаспортовНаПеревозку.ДатаУстановкиЗавершеноОперационно, КонецМесяца(СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершеноОперационно))<=10 Тогда
				СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершенияУправления = СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершеноОперационно;
			Иначе
				НомерДняМесяца = День(СтрокаТаблицаПаспортовНаПеревозку.ДатаУстановкиЗавершеноОперационно);
				Если НомерДняМесяца>10 Тогда
					СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершенияУправления = НачалоМесяца(СтрокаТаблицаПаспортовНаПеревозку.ДатаУстановкиЗавершеноОперационно);
				Иначе 	
					СтрокаТаблицаПаспортовНаПеревозку.ДатаЗавершенияУправления = НачалоМесяца(НачалоМесяца(СтрокаТаблицаПаспортовНаПеревозку.ДатаУстановкиЗавершеноОперационно)-1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицаПаспортовНаПеревозку.ID = ВыборкаДетальныеЗаписи.ID;
		СтрокаТаблицаПаспортовНаПеревозку.ЗапросКлиентаLS = ВыборкаДетальныеЗаписи.НомерРеференса;
		//Если ЗначениеЗаполнено(СтрокаТаблицаСчетов.СчётНаОплату) Тогда
		//    ПолучитьАктСчётФактура(СтрокаТаблицаСчетов.СчётНаОплату, СтрокаТаблицаСчетов);
		//	СтрокаТаблицаСчетов.СуммаСчет1с = СтрокаТаблицаСчетов.СчётНаОплату.СуммаДокумента;
		//
		//КонецЕсли;
		//СтрокаТаблицаПаспортовНаПеревозку.ID = ВыборкаДетальныеЗаписи.ID; 
		//СтрокаТаблицаПаспортовНаПеревозку.СчётLS = ВыборкаДетальныеЗаписи.НомерСчета;
		//СтрокаТаблицаПаспортовНаПеревозку.ДатаСчёта = ВыборкаДетальныеЗаписи.Дата_Выставления;
		//СтрокаТаблицаПаспортовНаПеревозку.КонтрагентLS = ВыборкаДетальныеЗаписи.КонтрагентLS;
		//СтрокаТаблицаПаспортовНаПеревозку.ДоговорLS = ВыборкаДетальныеЗаписи.ДоговорLS;
		//СтрокаТаблицаПаспортовНаПеревозку.ID_Контрагент = ВыборкаДетальныеЗаписи.ID_Контрагент;
		//СтрокаТаблицаПаспортовНаПеревозку.ID_Договор = ВыборкаДетальныеЗаписи.ID_Договор;
		//СтрокаТаблицаПаспортовНаПеревозку.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Контрагент, "Справочник.Контрагенты");
		////СтрокаТаблицаПаспортовНаПеревозку.Договор = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов");
		////СтрокаТаблицаПаспортовНаПеревозку.Договор = ОбщийМодульItsLabs.ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов", ВалютаСчёта);
		//СтрокаТаблицаПаспортовНаПеревозку.Договор = ПолучитьОбъектПоID(ВыборкаДетальныеЗаписи.ID_Договор, "Справочник.ДоговорыКонтрагентов", ВалютаСчёта);
		//СтрокаТаблицаПаспортовНаПеревозку.СуммаСчета = ВыборкаДетальныеЗаписи.СуммаСчета;
		//СтрокаТаблицаПаспортовНаПеревозку.ПризнакСчёта = ВыборкаДетальныеЗаписи.Признак1С;
		//СтрокаТаблицаПаспортовНаПеревозку.РеференсыЗаказов = ВыборкаДетальныеЗаписи.РеференсыЗаказов;
		//СтрокаТаблицаПаспортовНаПеревозку.ВалютаСчёта = ВалютаСчёта
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеЗаказовLS(Команда)
	ЗаполнитьДанныеЗаказовLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВРегистраПаспорт(ПаспортСсылка)

	ЗапросLS = Новый Запрос;
	ЗапросLS.Текст = 
		"ВЫБРАТЬ
		|	dbo_Запрос_Клиента.ID КАК ID
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Запрос_Клиента КАК dbo_Запрос_Клиента
		|ГДЕ
		|	dbo_Запрос_Клиента.НомерРеференса = &НомерРеференса";
	
	ЗапросLS.УстановитьПараметр("НомерРеференса", ПаспортСсылка.Номер);
	
	РезультатЗапросаLS = ЗапросLS.Выполнить();
	
	ВыборкаДетальныеЗаписиLS = РезультатЗапросаLS.Выбрать();
	
	Если ВыборкаДетальныеЗаписиLS.Следующий() Тогда 
		
		ОбщийМодульItsLabs.ЗаписатьОбъектыLogiSmart(ПаспортСсылка.Ссылка, ВыборкаДетальныеЗаписиLS.ID);
		
	КонецЕсли;

КонецПроцедуры // ДобавитьВРегистраПаспорт()

&НаСервере
Процедура ДобавитьВРегистрПаспортаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаПеревозку.Ссылка КАК Ссылка,
		|	ЗаявкаНаПеревозку.Номер КАК Номер
		|ИЗ
		|	Документ.ЗаявкаНаПеревозку КАК ЗаявкаНаПеревозку
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|		ПО ОбъектыLogiSmart.Объект = ЗаявкаНаПеревозку.Ссылка
		|ГДЕ
		|	ОбъектыLogiSmart.Объект ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДобавитьВРегистраПаспорт(ВыборкаДетальныеЗаписи.Ссылка)
	
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВРегистрПаспорта(Команда)
	ДобавитьВРегистрПаспортаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПаспортаНаСервере()
	
	Для каждого СтрТаблицаПаспартов Из ТаблицаПаспортовНаПеревозку Цикл
		Если СтрТаблицаПаспартов.НеЗагружать Тогда
			Продолжить;	
		КонецЕсли;
		
		Если СтрТаблицаПаспартов.Фл Тогда
		
			СтруктураПаспортаНаПеревозку = Новый Структура("Дата, Статус, ДатаЗавершеноОперационно, ДатаЗавершенияУправления, Организация, Подразделение, Контрагент, Ответственный"); 
			
			ЗаполнитьЗначенияСвойств(СтруктураПаспортаНаПеревозку, СтрТаблицаПаспартов); 
			СтруктураПаспортаНаПеревозку.Организация = ПолучитьОрганизацию();
			СтруктураПаспортаНаПеревозку.Контрагент = СтрТаблицаПаспартов.Клиент;
			СтруктураПаспортаНаПеревозку.Ответственный = СтрТаблицаПаспартов.Исполнитель;
			
			СтрТаблицаПаспартов.ПаспортНаПеревозку = СоздатьПаспортНаПеревозку(СтрТаблицаПаспартов.НомерРеференса, СтруктураПаспортаНаПеревозку, СтрТаблицаПаспартов.ПаспортНаПеревозку);			
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПаспорта(Команда)
	ЗаполнитьПаспортаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлПаспорт(Команда)
	СнятьУстановитьФл(Истина, "ТаблицаПаспортовНаПеревозку");
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлПаспорт(Команда)
	СнятьУстановитьФл(Ложь, "ТаблицаПаспортовНаПеревозку");
КонецПроцедуры

&НаКлиенте
Процедура ПризнакСчетаПриИзменении(Элемент)
	ЗаполнитьДанныеСчетовLSНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакПередан1сНаСервере()
	
	МассивIDФл = ПолучитьМассивIDФл("ТаблицаСчетов");
	
	Для Каждого ID Из МассивIDФл Цикл
		ЗаписатьПризнак1с(ID);	
	КонецЦикла;
	
	Если ПризнакСчета<>5 Тогда
		ЗаполнитьДанныеСчетовLSНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПередан1с(Команда)
	УстановитьПризнакПередан1сНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПризнакСчетаПоставщикаПриИзменении(Элемент)
	ЗаполнитьДанныеСчетовПоставщиковLSНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакПередан1сПоставщикиНаСервере()
	
	МассивIDФл = ПолучитьМассивIDФл("ТаблицаСчетовОтПоставщиков");
	
	Для Каждого ID Из МассивIDФл Цикл
		ЗаписатьПризнак1с(ID);	
	КонецЦикла;
	
	Если ПризнакСчетаПоставщика<>5 Тогда
		ЗаполнитьДанныеСчетовПоставщиковLSНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПередан1сПоставщики(Команда)
	УстановитьПризнакПередан1сПоставщикиНаСервере();
КонецПроцедуры

