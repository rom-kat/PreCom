#Область ОбщегоНазначения

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоровПоставщика()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	Возврат СписокВидовДоговоров;	

КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS, ДатаВремяИзменения = "", Очистка = Ложь)
	
	Если ДатаВремяИзменения="" Тогда
		ДатаВремяИзменения = ТекущаяДата();
	КонецЕсли;
	
	РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
	РегистрОбъектLS.Отбор.Объект.Установить(СсылкаОбъект);
	РегистрОбъектLS.Очистить();
	
	Если Не Очистка Тогда 
		НоваяЗапись = РегистрОбъектLS.Добавить();
		НоваяЗапись.Объект = СсылкаОбъект;
		НоваяЗапись.ID_LS = ID_LS;
		НоваяЗапись.ДатаВремяИзменения = ДатаВремяИзменения;
	КонецЕсли;
	
	РегистрОбъектLS.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПривестиНомерКЧислу(ТекНомер)
	
	НовыйНомер = "";
	Для НомСимвола = 1 По СтрДлина(ТекНомер) Цикл
		ТекСимвол = Сред(ТекНомер, НомСимвола, 1);
		Если ТекСимвол >= "0" И ТекСимвол <= "9" Тогда
			НовыйНомер = НовыйНомер + ТекСимвол;
		ИначеЕсли СтрДлина(НовыйНомер) > 0 Тогда // Основная часть номера уже прошла
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(НовыйНомер) Тогда
		НовыйНомер = "0";
	КонецЕсли;
	
	Возврат Число(НовыйНомер);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодразделение()

	Возврат Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");

КонецФункции // ПолучитьПодразделение()

&НаСервереБезКонтекста
Функция ПолучитьКонтрагента(ИНН)

	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
	
КонецФункции // ПолучитьКонтрагента()

&НаСервереБезКонтекста
Функция ПолучитьОбъект(ID, ВидОбъекта)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыLogiSmart.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК ОбъектыLogiSmart
		|ГДЕ
		|	ОбъектыLogiSmart.ID_LS = &ID_LS
		|	И ОбъектыLogiSmart.Объект ССЫЛКА "+ВидОбъекта;
	
	Запрос.УстановитьПараметр("ID_LS", ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Объект;
	Иначе 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьПользователя()

&НаСервереБезКонтекста
Функция ПолучитьСтавку(СтавкаНДСЧислом)

	Если СтавкаНДСЧислом=18 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС18;	
		
	ИначеЕсли СтавкаНДСЧислом=20 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС20;		
		
	ИначеЕсли СтавкаНДСЧислом=0 Тогда
	
		Возврат Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СтавкаНДСЧислом="Без НДС" Тогда
	
		Возврат Перечисления.СтавкиНДС.БезНДС;	
		
	КонецЕсли;	

КонецФункции // ПолучитьСтавку()

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию()

	Возврат Справочники.Организации.НайтиПоКоду("БП-000001");

КонецФункции // ПолучитьОрганизацию()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВалюта(KOD_Валюта)

	Возврат Справочники.Валюты.НайтиПоКоду(KOD_Валюта);

КонецФункции // ПолучитьВалюта(СтруктураСчета.KOD_Валюта)()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплаты(Договор, ДатаДокумента)
	
	Если Договор.УстановленСрокОплаты Тогда
		КоличествоДней = Договор.СрокОплаты;
	Иначе 	
		КоличествоДней = 37;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, &КоличествоДней) КАК СрокОплаты";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.СрокОплаты;
	
КонецФункции // ПолучитьСрокОплаты()

&НаСервереБезКонтекста
Функция ПолучитьСтрокуСоединения()

	ПараметрыСоединения = ВнешниеИсточникиДанных.LogiSmart.ПолучитьОбщиеПараметрыСоединения();	
	СтрокаСоединения = ПараметрыСоединения.СтрокаСоединения;	

	Возврат СтрокаСоединения;
	
КонецФункции // ПолучитьСтрокуСоединения()

&НаСервереБезКонтекста
Процедура ЗаписатьПризнак1с(Команда, ID_Счет)

	Команда.CommandText = "UPDATE T1 SET 
							|Признак1С = 1
							|FROM ""dbo"".""Счет"" AS T1 
							|WHERE T1.ID = "+Строка(Формат(ID_Счет, "ЧГ=0"));
		
	Команда.Execute();
	
КонецПроцедуры // ЗаписатьПризнак1с()

#КонецОбласти

#Область ОбработкаНоменклатуры

&НаСервереБезКонтекста
Процедура СверкаДанныхНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID,
		|	dbo_Тип_номенклатурной_единицы.Наименование КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|ГДЕ
		|	НЕ dbo_Тип_номенклатурной_единицы.IsGroup";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СсылкаНомен = Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Наименование);
		
		Если СсылкаНомен<>Неопределено И СсылкаНомен<>Справочники.Номенклатура.ПустаяСсылка() Тогда
			Если Не СсылкаНомен.ЭтоГруппа Тогда
			
			    Сообщить(""+СсылкаНомен+" "+Строка(ВыборкаДетальныеЗаписи.ID));
				
				РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
				РегистрОбъектLS.Отбор.Объект.Установить(СсылкаНомен);
				РегистрОбъектLS.Очистить();
				
				НоваяЗапись = РегистрОбъектLS.Добавить();
				НоваяЗапись.Объект = СсылкаНомен;
				НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
				РегистрОбъектLS.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаДанныхНоменклатуры(Команда)
	СверкаДанныхНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНоменклатурыLSНаСервере()
	
	ТаблицаНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Тип_номенклатурной_единицы.ID КАК ID,
		|	dbo_Тип_номенклатурной_единицы.Наименование КАК Наименование,
		|	dbo_Тип_номенклатурной_единицы.Устаревший КАК Устаревший
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Тип_номенклатурной_единицы КАК dbo_Тип_номенклатурной_единицы
		|ГДЕ
		|	НЕ dbo_Тип_номенклатурной_единицы.IsGroup
		|	И (dbo_Тип_номенклатурной_единицы.Устаревший = ЛОЖЬ
		|			ИЛИ dbo_Тип_номенклатурной_единицы.Устаревший ЕСТЬ NULL)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаНоменклатуры = ТаблицаНоменклатуры.Добавить();
		
		СтрокаТаблицаНоменклатуры.Номенклатура = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Номенклатура");
		СтрокаТаблицаНоменклатуры.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаНоменклатуры.НаименованиеLS = ВыборкаДетальныеЗаписи.Наименование;
		СтрокаТаблицаНоменклатуры.Устаревшие = ВыборкаДетальныеЗаписи.Устаревший;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеНоменклатурыLS(Команда)
	ЗаполнитьДанныеНоменклатурыLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаНоменклатуры.ТекущиеДанные.ID;
	ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.Номенклатура;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПользователей

&НаСервере
Процедура ЗаполнитьДанныеПользователейLSНаСервере()
	
	ТаблицаПользователей.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Персона.ID КАК ID,
		|	dbo_Персона.Фамилия КАК Фамилия,
		|	dbo_Персона.Имя КАК Имя,
		|	dbo_Персона.Отчество КАК Отчество,
		|	dbo_Персона.Представление КАК Представление
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаПользователей = ТаблицаПользователей.Добавить();
		
		СтрокаТаблицаПользователей.Пользователь = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Пользователи");
		СтрокаТаблицаПользователей.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаПользователей.НаименованиеLS = ВыборкаДетальныеЗаписи.Фамилия+" "+ВыборкаДетальныеЗаписи.Имя+" "+ВыборкаДетальныеЗаписи.Отчество;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПользователейLS(Команда)
	ЗаполнитьДанныеПользователейLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаПользователей.ТекущиеДанные.ID;
	ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейПользовательОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.Пользователь;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаКонтрагентов

&НаСервере
Процедура ЗаполнитьДанныеКонтрагентовLSНаСервере()
	
	ТаблицаКонтрагенты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Контрагент.ID КАК ID,
		|	dbo_Контрагент.ПолноеИмя КАК Наименование,
		|	dbo_Контрагент.КраткоеИмя КАК КраткоеИмя,
		|	dbo_Контрагент.ИНН КАК ИНН
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаКонтрагенты = ТаблицаКонтрагенты.Добавить();
		
		СтрокаТаблицаКонтрагенты.Контрагент = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Справочник.Контрагенты");
		СтрокаТаблицаКонтрагенты.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаКонтрагенты.НаименованиеLS = ВыборкаДетальныеЗаписи.Наименование;
		СтрокаТаблицаКонтрагенты.КраткоеИмя = ВыборкаДетальныеЗаписи.КраткоеИмя;
		СтрокаТаблицаКонтрагенты.ИНН = ВыборкаДетальныеЗаписи.ИНН;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКонтрагентовLS(Команда)
	ЗаполнитьДанныеКонтрагентовLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачальноеЗаполнениеКонтрагентовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Контрагент.ID КАК ID,
		|	dbo_Контрагент.ПолноеИмя КАК Наименование,
		|	dbo_Контрагент.КраткоеИмя КАК КраткоеИмя,
		|	dbo_Контрагент.ИНН КАК ИНН
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СсылкаКонтрагент = ПолучитьКонтрагента(ВыборкаДетальныеЗаписи.ИНН);
		
		Если СсылкаКонтрагент<>Неопределено И СсылкаКонтрагент<>Справочники.Контрагенты.ПустаяСсылка() Тогда
			Если Не СсылкаКонтрагент.ЭтоГруппа Тогда
			
			    Сообщить(""+СсылкаКонтрагент+" "+Строка(ВыборкаДетальныеЗаписи.ID));
				
				РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
				РегистрОбъектLS.Отбор.Объект.Установить(СсылкаКонтрагент);
				РегистрОбъектLS.Очистить();
				
				НоваяЗапись = РегистрОбъектLS.Добавить();
				НоваяЗапись.Объект = СсылкаКонтрагент;
				НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
				РегистрОбъектLS.Записать();
				
			КонецЕсли;
		Иначе 
			
			СсылкаКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Наименование);
			Если СсылкаКонтрагент<>Неопределено И СсылкаКонтрагент<>Справочники.Контрагенты.ПустаяСсылка() Тогда
				Если Не СсылкаКонтрагент.ЭтоГруппа Тогда
				
				    Сообщить(""+СсылкаКонтрагент+" "+Строка(ВыборкаДетальныеЗаписи.ID));
					
					РегистрОбъектLS = РегистрыСведений.ОбъектыLogiSmart.СоздатьНаборЗаписей();
					РегистрОбъектLS.Отбор.Объект.Установить(СсылкаКонтрагент);
					РегистрОбъектLS.Очистить();
					
					НоваяЗапись = РегистрОбъектLS.Добавить();
					НоваяЗапись.Объект = СсылкаКонтрагент;
					НоваяЗапись.ID_LS = ВыборкаДетальныеЗаписи.ID;
					РегистрОбъектLS.Записать();
					
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НачальноеЗаполнениеКонтрагентовНаСервере()

&НаКлиенте
Процедура НачальноеЗаполнениеКонтрагентов(Команда)
	НачальноеЗаполнениеКонтрагентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаКонтрагенты.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаКонтрагенты.ТекущиеДанные.Контрагент;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаКонтрагенты.ТекущиеДанные.ID;
	ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСчетов

&НаСервереБезКонтекста
Функция ПолучитьСтрокиСчета(IDСчета)

	ТЗВозврат = Новый ТаблицаЗначений;
	ТЗВозврат.Колонки.Добавить("Номенклатура");
	ТЗВозврат.Колонки.Добавить("ID_НоменклатурнаяЕдиница");
	ТЗВозврат.Колонки.Добавить("СтавкаНДС");
	ТЗВозврат.Колонки.Добавить("Цена");
	ТЗВозврат.Колонки.Добавить("Количество");
	ТЗВозврат.Колонки.Добавить("СуммаНДС");
	ТЗВозврат.Колонки.Добавить("Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Контейнер_Услуги_Счета.Ссылка КАК Ссылка,
		|	dbo_Контейнер_Услуги_Счета.ID КАК ID,
		|	dbo_Контейнер_Услуги_Счета.ID_Счет КАК ID_Счет,
		|	dbo_Контейнер_Услуги_Счета.ID_НоменклатурнаяЕдиница.ID КАК ID_НоменклатурнаяЕдиница,
		|	ЕСТЬNULL(dbo_Контейнер_Услуги_Счета.Налог, ""Без НДС"") КАК Налог,
		|	dbo_Контейнер_Услуги_Счета.Курс КАК Курс,
		|	dbo_Контейнер_Услуги_Счета.Количество КАК Количество,
		|	dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета / dbo_Контейнер_Услуги_Счета.Количество КАК Цена,
		|	dbo_Контейнер_Услуги_Счета.СуммаСНалогамиВалСчета КАК Сумма,
		|	dbo_Контейнер_Услуги_Счета.СуммаНалогаВалСчета КАК СуммаНДС
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контейнер_Услуги_Счета КАК dbo_Контейнер_Услуги_Счета
		|ГДЕ
		|	dbo_Контейнер_Услуги_Счета.ID_Счет = &ID_Счет";
	
	
	СсылкаЗаписьВнешнийИсточник = ВнешниеИсточникиДанных.LogiSmart.Таблицы.dbo_Счет.ПолучитьСсылку(IDСчета);
	Запрос.УстановитьПараметр("ID_Счет", СсылкаЗаписьВнешнийИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЗВозврат = ТЗВозврат.Добавить();
		СтрокаТЗВозврат.Номенклатура = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID_НоменклатурнаяЕдиница, "Справочник.Номенклатура");
		СтрокаТЗВозврат.СтавкаНДС = ПолучитьСтавку(ВыборкаДетальныеЗаписи.Налог);
		ЗаполнитьЗначенияСвойств(СтрокаТЗВозврат, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат ТЗВозврат;
	
КонецФункции // ПолучитьСтрокиСчета()

&НаСервереБезКонтекста
Функция СоздатьСчет(СтруктураСчета, СчётНаОплатуСсылка)

	ТекДата = ТекущаяДата();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
		Блокировка.Заблокировать();
		
		ПодразделениеОрганизации = ПолучитьПодразделение();
		ДатаСчета = СтруктураСчета.Дата_Выставления;
		
		Если СчётНаОплатуСсылка=Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
			СчётНаОплатуОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		Иначе 	
			СчётНаОплатуОбъект = СчётНаОплатуСсылка.ПолучитьОбъект();
			СчётНаОплатуОбъект.Товары.Очистить();
		КонецЕсли;
		
		//СчётНаОплатуОбъект.Номер = ПолучитьНомерНовогоСчета(ПодразделениеОрганизации, ДатаСчета);
		//СчётНаОплатуОбъект.Дата = ДатаСчета;
		СчётНаОплатуОбъект.Номер = СтруктураСчета.НомерСчета;
		СчётНаОплатуОбъект.Дата = СтруктураСчета.Дата_Выставления;
		СчётНаОплатуОбъект.ВалютаДокумента = ПолучитьВалюта(СтруктураСчета.KOD_Валюта);
		СчётНаОплатуОбъект.Организация = ПолучитьОрганизацию();
		СчётНаОплатуОбъект.ОрганизацияПолучатель = ПолучитьОрганизацию();
		СчётНаОплатуОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СчётНаОплатуОбъект.Контрагент = ПолучитьОбъект(СтруктураСчета.ID_Контрагент, "Справочник.Контрагенты");//учитьКонтрагента(СтруктураСчета.ИННКонтрагента);
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.Организация, 
			ПолучитьМассивВидовДоговоров());
		СчётНаОплатуОбъект.Комментарий = СтруктураСчета.Комментарий;
		СчётНаОплатуОбъект.Ответственный = ПолучитьОбъект(СтруктураСчета.IDОтветственный, "Справочник.Пользователи");
		СчётНаОплатуОбъект.СуммаВключаетНДС = Истина;
		
		СчётНаОплатуОбъект.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерСчета+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетныеСчетаДляКонтрагентаСрезПоследних.РасчетныйСчет
			|ИЗ
			|	РегистрСведений.РасчетныеСчетаДляКонтрагента.СрезПоследних(
			|			,
			|			Организация = &Организация
			|				И Контрагент = &Контрагент) КАК РасчетныеСчетаДляКонтрагентаСрезПоследних";
		
		Запрос.УстановитьПараметр("Контрагент", СчётНаОплатуОбъект.Контрагент);
		Запрос.УстановитьПараметр("Организация", СчётНаОплатуОбъект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчётНаОплатуОбъект.СтруктурнаяЕдиница = ВыборкаДетальныеЗаписи.РасчетныйСчет
		Иначе 
			мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			СчётНаОплатуОбъект.СтруктурнаяЕдиница = Справочники.БанковскиеСчета.ПустаяСсылка();
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчётНаОплатуОбъект.СтруктурнаяЕдиница, СчётНаОплатуОбъект.Организация, мВалютаРегламентированногоУчета);
		КонецЕсли;
		
		ТЗСтрокиСчёта = ПолучитьСтрокиСчета(СтруктураСчета.ID);
		
		Для каждого СтрокаТЗСтрокиСчёта Из ТЗСтрокиСчёта Цикл
			
			СтрокаТовары = СчётНаОплатуОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТЗСтрокиСчёта);
			
		КонецЦикла;
		
		СчётНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		СчётНаОплатуСсылка = СчётНаОплатуОбъект.Ссылка;
		
		СрокОплаты = ПолучитьСрокОплаты(СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Дата);
		СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчётНаОплатуСсылка, СрокОплаты);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат СчётНаОплатуСсылка;
	
КонецФункции // СоздатьСчет()

&НаСервереБезКонтекста
Процедура ЗагрузкаСчетовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаНаОплатуLogiSmart.ID_LS КАК ID_LS,
		|	СчетаНаОплатуLogiSmart.Объект КАК СчётНаОплатуСсылка,
		|	СчетаНаОплатуLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК СчетаНаОплатуLogiSmart
		|ГДЕ
		|	СчетаНаОплатуLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПокупателю";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МинДатаВремяИзменения = КонецДня(ТекущаяДата());
	МассивIDLS = Новый Массив;
	ТЗIDLS = Новый ТаблицаЗначений;
	ТЗIDLS.Колонки.Добавить("ID_LS");
	ТЗIDLS.Колонки.Добавить("СчётНаОплатуСсылка");
	ТЗIDLS.Колонки.Добавить("ДатаВремяИзменения");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МинДатаВремяИзменения>ВыборкаДетальныеЗаписи.ДатаВремяИзменения Тогда
			МинДатаВремяИзменения = ВыборкаДетальныеЗаписи.ДатаВремяИзменения;
		КонецЕсли;
		
		МассивIDLS.Добавить(ВыборкаДетальныеЗаписи.ID_LS);
		
		СтрокаТЗIDLS = ТЗIDLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗIDLS, ВыборкаДетальныеЗаписи);
	
	КонецЦикла;
		
	Соединение  = Новый COMОбъект("ADODB.Connection");
	Команда     = Новый COMОбъект("ADODB.Command");
	
	Соединение.ConnectionString = ПолучитьСтрокуСоединения();
	Соединение.ConnectionTimeout = 30;
	Соединение.CommandTimeout = 600;
	
	//Открытие соединение
	Попытка
		Соединение.Open();
		Команда.ActiveConnection  = Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.ID_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Счет.ID_Валюта КАК ID_Валюта,
		|	dbo_Счет.ID_Валюта.KOD КАК KOD_Валюта,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаВВалСчета,
		|	dbo_Счет.СуммаВБазовойВалюте КАК СуммаВБазовойВалюте,
		|	dbo_Счет.СуммаКОплате КАК СуммаКОплате,
		|	dbo_Счет.Комментарий КАК Комментарий,
		|	dbo_Контрагент.ИНН КАК ИННКонтрагента,
		|	dbo_Персона.ID КАК IDОтветственный,
		|	dbo_Счет.CurEditTime КАК CurEditTime,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	dbo_Счет.ЕстьОригиналАкта КАК ЕстьОригиналАкта,
		|	dbo_Счет.ЕстьОригиналСчетФактура КАК ЕстьОригиналСчетФактура,
		|	ЕСТЬNULL(dbo_Счет.НомерАкта, dbo_Счет.НомерСчета) КАК НомерАкта,
		|	ЕСТЬNULL(dbo_Счет.ДатаАкта, dbo_Счет.Дата_Выставления) КАК ДатаАкта,
		|	dbo_Счет.НомерСчетФактуры КАК НомерСчетФактуры,
		|	dbo_Счет.ДатаСчетФактуры КАК ДатаСчетФактуры,
		|	dbo_Счет.Дата_действия КАК ОплатитьДо
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Признак_Выгрузки_1С КАК dbo_Признак_Выгрузки_1С
		|		ПО dbo_Счет.Признак1С = dbo_Признак_Выгрузки_1С.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Счет.ID_Контрагент.ID = dbo_Контрагент.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|		ПО dbo_Счет.ID_Менеджер.ID = dbo_Персона.ID
		|ГДЕ
		|	dbo_Счет.ID_Направление = 1
		|	И (НЕ dbo_Счет.ID В (&МассивIDLS)
		|			ИЛИ dbo_Счет.ID В (&МассивIDLS)
		|				И dbo_Признак_Выгрузки_1С.ID <> 1)";
	
	Запрос.УстановитьПараметр("МассивIDLS", МассивIDLS);
	Запрос.УстановитьПараметр("МинДатаИзменения", МинДатаВремяИзменения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТЗ = ТЗIDLS.Найти(ВыборкаДетальныеЗаписи.ID, "ID_LS");
		Если СтрокаТЗ<>Неопределено Тогда
			СчётНаОплатуСсылка = СтрокаТЗ.СчётНаОплатуСсылка;
		Иначе 
			СчётНаОплатуСсылка = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураСчета = Новый Структура("ID, ID_Контрагент, KOD_Валюта, НомерСчета, Дата_Выставления, СуммаВВалСчета, СуммаВБазовойВалюте, СуммаКОплате, Комментарий, ИННКонтрагента, IDОтветственный, РеференсыЗаказов, НомерАкта, ДатаАкта");
		
		ЗаполнитьЗначенияСвойств(СтруктураСчета, ВыборкаДетальныеЗаписи);
		
		СчетСсылка = СоздатьСчет(СтруктураСчета, СчётНаОплатуСсылка);
		
		СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(СчетСсылка, ВыборкаДетальныеЗаписи.ОплатитьДо);
		
		Если СчетСсылка<>Неопределено И СчетСсылка<>Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
		
			ЗаписатьОбъектыLogiSmart(СчетСсылка, ВыборкаДетальныеЗаписи.ID, ВыборкаДетальныеЗаписи.CurEditTime);
			ЗаписатьПризнак1с(Команда, ВыборкаДетальныеЗаписи.ID);
			
			Если ВыборкаДетальныеЗаписи.ЕстьОригиналАкта Тогда
				СоздатьАктНаОснованииСчёта(СчетСсылка, ВыборкаДетальныеЗаписи.НомерАкта, ВыборкаДетальныеЗаписи.ДатаАкта, СтруктураСчета);	
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	Соединение.Close();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСчетов(Команда)
	ЗагрузкаСчетовНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДокументБезНДС(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.СтавкаНДС <> &СтавкаНДС
		|	И РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Ссылка,
		|	РеализацияТоваровУслугУслуги.НомерСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.СтавкаНДС <> &СтавкаНДС
		|	И РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка,
		|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС <> &СтавкаНДС
		|	И РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПроверитьДокументБезНДС()

&НаСервереБезКонтекста
Процедура СоздатьАктНаОснованииСчёта(СсылкаСчёт, НомерАкта, ДатаАкта, СтруктураСчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю";
	
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СсылкаСчёт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДокАкт = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе 
		ДокАкт = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	ДокАкт.Заполнить(СсылкаСчёт);
	ДокАкт.Номер = НомерАкта;
	ДокАкт.Дата = ДатаАкта;
	
	ТекДата = ТекущаяДата();
	ДокАкт.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерАкта+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
	
	ДокАкт.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если Не ПроверитьДокументБезНДС(ДокАкт.Ссылка) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокАкт.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчетФактура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Иначе 
			СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		КонецЕсли;
		
		СчетФактура.Заполнить(ДокАкт.Ссылка);
		СчетФактура.Номер = НомерАкта;
		СчетФактура.Дата = ДатаАкта;
		
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
	
	КонецЕсли;
	
КонецПроцедуры // СоздатьАктНаОснованииСчёта()

&НаСервере
Процедура ЗаполнитьДанныеСчетовLSНаСервере()
	
	ТаблицаСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.ID_Контрагент КАК ID_Контрагент,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	ВЫБОР
		|		КОГДА dbo_Счет.Признак1С.ID = 0
		|			ТОГДА ""Новый""
		|		КОГДА dbo_Счет.Признак1С.ID = 1
		|			ТОГДА ""Передан в 1с""
		|		ИНАЧЕ ""Обновлён""
		|	КОНЕЦ КАК Признак1С,
		|	ВЫБОР
		|		КОГДА dbo_Счет.ЕстьОригиналАкта
		|			ТОГДА ""Есть Акт""
		|		ИНАЧЕ ""Нет Акта""
		|	КОНЕЦ КАК НаличиеАкта,
		|	dbo_Счет.НомерАкта КАК НомерАкта,
		|	dbo_Счет.ДатаАкта КАК ДатаАкта
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|ГДЕ
		|	dbo_Счет.ID_Направление = 1";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаСчетов = ТаблицаСчетов.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаСчетов, ВыборкаДетальныеЗаписи);
		
		СтрокаТаблицаСчетов.СчётНаОплату = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Документ.СчетНаОплатуПокупателю");
		СтрокаТаблицаСчетов.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаСчетов.СчётLS = ВыборкаДетальныеЗаписи.НомерСчета;
		СтрокаТаблицаСчетов.КонтрагентLS = ВыборкаДетальныеЗаписи.ID_Контрагент;
		СтрокаТаблицаСчетов.ПризнакСчёта = ВыборкаДетальныеЗаписи.Признак1С;
		СтрокаТаблицаСчетов.РеференсыЗаказов = ВыборкаДетальныеЗаписи.РеференсыЗаказов;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСчетовLS(Команда)
	ЗаполнитьДанныеСчетовLSНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.СчётНаОплату;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчётНаОплатуИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ID_LS = Элементы.ТаблицаСчетов.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетов.ТекущиеДанные.СчётНаОплату;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСчетовПоставщиковLSНаСервере()
	
	ТаблицаСчетовОтПоставщиков.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.ID_Контрагент КАК ID_Контрагент,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	dbo_Счет.ID_Контрагент.ПолноеИмя КАК ID_КонтрагентПолноеИмя,
		|	ВЫБОР
		|		КОГДА dbo_Счет.Признак1С.ID = 0
		|			ТОГДА ""Новый""
		|		КОГДА dbo_Счет.Признак1С.ID = 1
		|			ТОГДА ""Передан в 1с""
		|		ИНАЧЕ ""Обновлён""
		|	КОНЕЦ КАК Признак1С,
		|	ВЫБОР
		|		КОГДА dbo_Счет.ЕстьОригиналАкта
		|			ТОГДА ""Есть Акт""
		|		ИНАЧЕ ""Нет Акта""
		|	КОНЕЦ КАК НаличиеАкта,
		|	dbo_Счет.НомерАкта КАК НомерАкта,
		|	dbo_Счет.ДатаАкта КАК ДатаАкта,
		|	dbo_Счет.НомерУКонтрагента КАК НомерУКонтрагента
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|ГДЕ
		|	dbo_Счет.ID_Направление = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТаблицаСчетов = ТаблицаСчетовОтПоставщиков.Добавить();
		
		СтрокаТаблицаСчетов.СчётОтПоставщика = ПолучитьОбъект(ВыборкаДетальныеЗаписи.ID, "Документ.СчетНаОплатуПоставщика");
		СтрокаТаблицаСчетов.ID = ВыборкаДетальныеЗаписи.ID; 
		СтрокаТаблицаСчетов.СчётLS = ВыборкаДетальныеЗаписи.НомерСчета;
		СтрокаТаблицаСчетов.КонтрагентLS = ВыборкаДетальныеЗаписи.ID_Контрагент;
		СтрокаТаблицаСчетов.РеференсыЗаказов = ВыборкаДетальныеЗаписи.РеференсыЗаказов;
		СтрокаТаблицаСчетов.ПризнакСчёта = ВыборкаДетальныеЗаписи.Признак1С;
		СтрокаТаблицаСчетов.НаличиеАкта = ВыборкаДетальныеЗаписи.НаличиеАкта;
		СтрокаТаблицаСчетов.НомерАкта = ВыборкаДетальныеЗаписи.НомерАкта;
		СтрокаТаблицаСчетов.ДатаАкта = ВыборкаДетальныеЗаписи.ДатаАкта;
		СтрокаТаблицаСчетов.НомерУКонтрагента = ВыборкаДетальныеЗаписи.НомерУКонтрагента;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСчетовПоставщиковLS(Команда)
	ЗаполнитьДанныеСчетовПоставщиковLSНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСчетПоставщика(СтруктураСчета, СчётНаОплатуСсылка)

	ТекДата = ТекущаяДата();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
		Блокировка.Заблокировать();
		
		ПодразделениеОрганизации = ПолучитьПодразделение();
		ДатаСчета = СтруктураСчета.Дата_Выставления;
		
		Если СчётНаОплатуСсылка=Документы.СчетНаОплатуПоставщика.ПустаяСсылка() Тогда
			СчётНаОплатуОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		Иначе 	
			СчётНаОплатуОбъект = СчётНаОплатуСсылка.ПолучитьОбъект();
			СчётНаОплатуОбъект.Товары.Очистить();
		КонецЕсли;
		
		СчётНаОплатуОбъект.Номер = СтруктураСчета.НомерСчета;
		СчётНаОплатуОбъект.Дата = СтруктураСчета.Дата_Выставления;
		СчётНаОплатуОбъект.ВалютаДокумента = ПолучитьВалюта(СтруктураСчета.KOD_Валюта);
		СчётНаОплатуОбъект.Организация = ПолучитьОрганизацию();
		
		СчётНаОплатуОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СчётНаОплатуОбъект.Контрагент = ПолучитьОбъект(СтруктураСчета.ID_Контрагент, "Справочник.Контрагенты");//ПолучитьКонтрагента(СтруктураСчета.ИННКонтрагента);
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			СчётНаОплатуОбъект.ДоговорКонтрагента, СчётНаОплатуОбъект.Контрагент, СчётНаОплатуОбъект.Организация, 
			ПолучитьМассивВидовДоговоровПоставщика());
		СчётНаОплатуОбъект.Комментарий = СтруктураСчета.Комментарий;
		СчётНаОплатуОбъект.Ответственный = ПолучитьОбъект(СтруктураСчета.IDОтветственный, "Справочник.Пользователи");
		СчётНаОплатуОбъект.СуммаВключаетНДС = Истина;
		
		СчётНаОплатуОбъект.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерСчета+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
		
		ТЗСтрокиСчёта = ПолучитьСтрокиСчета(СтруктураСчета.ID);
		
		Для каждого СтрокаТЗСтрокиСчёта Из ТЗСтрокиСчёта Цикл
			
			СтрокаТовары = СчётНаОплатуОбъект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТЗСтрокиСчёта);
		
		КонецЦикла;
		
		СчётНаОплатуОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		СчётНаОплатуСсылка = СчётНаОплатуОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат СчётНаОплатуСсылка;
	
КонецФункции // СоздатьСчет()

&НаСервереБезКонтекста
Процедура ЗагрузкаСчетовПоставщиковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаНаОплатуLogiSmart.ID_LS КАК ID_LS,
		|	СчетаНаОплатуLogiSmart.Объект КАК СчётНаОплатуСсылка,
		|	СчетаНаОплатуLogiSmart.ДатаВремяИзменения КАК ДатаВремяИзменения
		|ИЗ
		|	РегистрСведений.ОбъектыLogiSmart КАК СчетаНаОплатуLogiSmart
		|ГДЕ
		|	СчетаНаОплатуLogiSmart.Объект ССЫЛКА Документ.СчетНаОплатуПоставщика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МинДатаВремяИзменения = КонецДня(ТекущаяДата());
	МассивIDLS = Новый Массив;
	ТЗIDLS = Новый ТаблицаЗначений;
	ТЗIDLS.Колонки.Добавить("ID_LS");
	ТЗIDLS.Колонки.Добавить("СчётНаОплатуСсылка");
	ТЗIDLS.Колонки.Добавить("ДатаВремяИзменения");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МинДатаВремяИзменения>ВыборкаДетальныеЗаписи.ДатаВремяИзменения Тогда
			МинДатаВремяИзменения = ВыборкаДетальныеЗаписи.ДатаВремяИзменения;
		КонецЕсли;
		
		МассивIDLS.Добавить(ВыборкаДетальныеЗаписи.ID_LS);
		
		СтрокаТЗIDLS = ТЗIDLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗIDLS, ВыборкаДетальныеЗаписи);
	
	КонецЦикла;
		
	Соединение  = Новый COMОбъект("ADODB.Connection");
	Команда     = Новый COMОбъект("ADODB.Command");
	
	Соединение.ConnectionString = ПолучитьСтрокуСоединения();
	Соединение.ConnectionTimeout = 30;
	Соединение.CommandTimeout = 600;
	
	//Открытие соединение
	Попытка
		Соединение.Open();
		Команда.ActiveConnection  = Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_Счет.Ссылка КАК Ссылка,
		|	dbo_Счет.ID КАК ID,
		|	dbo_Счет.ID_Контрагент.ID КАК ID_Контрагент,
		|	dbo_Счет.ID_Валюта КАК ID_Валюта,
		|	dbo_Счет.ID_Валюта.KOD КАК KOD_Валюта,
		|	dbo_Счет.НомерСчета КАК НомерСчета,
		|	dbo_Счет.Дата_Выставления КАК Дата_Выставления,
		|	dbo_Счет.СуммаВВалСчета КАК СуммаВВалСчета,
		|	dbo_Счет.СуммаВБазовойВалюте КАК СуммаВБазовойВалюте,
		|	dbo_Счет.СуммаКОплате КАК СуммаКОплате,
		|	dbo_Счет.Комментарий КАК Комментарий,
		|	dbo_Контрагент.ИНН КАК ИННКонтрагента,
		|	dbo_Персона.ID КАК IDОтветственный,
		|	dbo_Счет.CurEditTime КАК CurEditTime,
		|	dbo_Счет.РеференсыЗаказов КАК РеференсыЗаказов,
		|	dbo_Счет.ЕстьОригиналАкта КАК ЕстьОригиналАкта,
		|	dbo_Счет.ЕстьОригиналСчетФактура КАК ЕстьОригиналСчетФактура,
		|	dbo_Счет.НомерАкта КАК НомерАкта,
		|	dbo_Счет.ДатаАкта КАК ДатаАкта,
		|	dbo_Счет.НомерСчетФактуры КАК НомерСчетФактуры,
		|	dbo_Счет.ДатаСчетФактуры КАК ДатаСчетФактуры,
		|	dbo_Счет.НомерУКонтрагента КАК НомерУКонтрагента
		|ИЗ
		|	ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Счет КАК dbo_Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Признак_Выгрузки_1С КАК dbo_Признак_Выгрузки_1С
		|		ПО dbo_Счет.Признак1С = dbo_Признак_Выгрузки_1С.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Контрагент КАК dbo_Контрагент
		|		ПО dbo_Счет.ID_Контрагент.ID = dbo_Контрагент.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.LogiSmart.Таблица.dbo_Персона КАК dbo_Персона
		|		ПО dbo_Счет.ID_Менеджер.ID = dbo_Персона.ID
		|ГДЕ
		|	dbo_Счет.ID_Направление = 0
		|	И (НЕ dbo_Счет.ID В (&МассивIDLS)
		|			ИЛИ dbo_Счет.ID В (&МассивIDLS)
		|				И dbo_Признак_Выгрузки_1С.ID <> 1)";
	
	Запрос.УстановитьПараметр("МассивIDLS", МассивIDLS);
	Запрос.УстановитьПараметр("МинДатаИзменения", МинДатаВремяИзменения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТЗ = ТЗIDLS.Найти(ВыборкаДетальныеЗаписи.ID, "ID_LS");
		Если СтрокаТЗ<>Неопределено Тогда
			СчётНаОплатуСсылка = СтрокаТЗ.СчётНаОплатуСсылка;
		Иначе 
			СчётНаОплатуСсылка = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураСчета = Новый Структура("ID, ID_Контрагент, KOD_Валюта, НомерСчета, Дата_Выставления, СуммаВВалСчета, СуммаВБазовойВалюте, СуммаКОплате, Комментарий, ИННКонтрагента, IDОтветственный, РеференсыЗаказов, НомерУКонтрагента, ЕстьОригиналАкта, ЕстьОригиналСчетФактура, НомерАкта, ДатаАкта, НомерСчетФактуры, ДатаСчетФактуры");
		
		ЗаполнитьЗначенияСвойств(СтруктураСчета, ВыборкаДетальныеЗаписи);
		
		СчетСсылка = СоздатьСчетПоставщика(СтруктураСчета, СчётНаОплатуСсылка);
		
		Если СчетСсылка<>Неопределено И СчетСсылка<>Документы.СчетНаОплатуПокупателю.ПустаяСсылка() Тогда
			ЗаписатьОбъектыLogiSmart(СчетСсылка, ВыборкаДетальныеЗаписи.ID, ВыборкаДетальныеЗаписи.CurEditTime);
		    ЗаписатьПризнак1с(Команда, ВыборкаДетальныеЗаписи.ID);
			
			Если ВыборкаДетальныеЗаписи.ЕстьОригиналАкта Тогда
				СоздатьПоступлениеОтПоставщикаОснованииСчёта(СчетСсылка, ВыборкаДетальныеЗаписи.НомерАкта, ВыборкаДетальныеЗаписи.ДатаАкта, СтруктураСчета);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Соединение.Close();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьПоступлениеОтПоставщикаОснованииСчёта(СчетСсылка, НомерАкта, ДатаАкта, СтруктураСчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.СчетНаОплатуПоставщика = &СчетНаОплатуПоставщика";
	
	Запрос.УстановитьПараметр("СчетНаОплатуПоставщика", СчетСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ДокПоступление = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	Иначе 
		ДокПоступление = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();  
	КонецЕсли;
	
	ДокПоступление.Заполнить(СчетСсылка);
	ДокПоступление.Дата = ДатаАкта;
	
	ДокПоступление.НомерВходящегоДокумента = НомерАкта;
	ДокПоступление.ДатаВходящегоДокумента = НомерАкта;
	
	ТекДата = ТекущаяДата();
	ДокПоступление.Комментарий = "Загружено из LogiSmart "+ТекДата+". № счета LS:"+СтруктураСчета.НомерАкта+". № заказа LS:"+СтруктураСчета.РеференсыЗаказов+".";
	
	ДокПоступление.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если СтруктураСчета.ЕстьОригиналСчетФактура Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокПоступление.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			СчетФактура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Иначе 
			СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
		КонецЕсли;
		
		СчетФактура.Заполнить(ДокПоступление.Ссылка);
		СчетФактура.НомерВходящегоДокумента = СтруктураСчета.НомерСчетФактуры;
		СчетФактура.Дата = СтруктураСчета.ДатаСчетФактуры;
		СчетФактура.ДатаВходящегоДокумента = СтруктураСчета.ДатаСчетФактуры;
		
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
	
	КонецЕсли;

КонецПроцедуры // СоздатьПоступлениеОтПоставщикаОснованииСчёта()

&НаКлиенте
Процедура ЗагрузкаСчетовПоставщиков(Команда)
	ЗагрузкаСчетовПоставщиковНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковСчётНаОплатуОчистка(Элемент, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.СчётОтПоставщика;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковСчётНаОплатуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID;
	ЗаписатьОбъектыLogiSmart(ВыбранноеЗначение, ID_LS);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовОтПоставщиковСчётНаОплатуИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ID_LS = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.ID;
	СсылкаОбъект = Элементы.ТаблицаСчетовОтПоставщиков.ТекущиеДанные.СчётОтПоставщика;
	ЗаписатьОбъектыLogiSmart(СсылкаОбъект, ID_LS,, Истина);
КонецПроцедуры

#КонецОбласти  

